{
    "author": "Thomas Elmiger",
    "core-version": "5.1.13",
    "created": "20170205215504722",
    "description": "DetailsWidget",
    "list": "readme license",
    "modified": "20171221180819922",
    "plugin-type": "plugin",
    "title": "$:/plugins/telmiger/details",
    "type": "application/json",
    "version": "0.6.1",

    "tiddlers": {
        "$:/plugins/telmiger/details/details.css": {
            "text": "/* details and summary */\n\ndetails {\n   background-color: <<colour tiddler-info-tab-background>>;\n   transition: height 1s ease;\n}\n\ndetails summary {\n   display: list-item;\n   padding: 0.2em 0.5em 0.2em 0.66em;\n   padding-left: 1.76em;  /* adjust for indentation */\n   text-indent: -1.1em;\n   cursor: pointer;\n   background-color: <<colour dropdown-tab-background>>;\n}\n\ndetails.notification summary {\n    background-color: <<colour notification-background>>;\n}\ndetails.warning summary {\n    background-color: #ffe4df;\n}\ndetails.success summary {\n    background-color: #bfffe6;\n}\n\ndetails span {\n   padding: 0 0.75em 0.1em 0.8em;\n   display: block;\n}\n\ndetails:not([open]) { \n   border-bottom: 1px solid lightgray;\n   cursor: pointer;\n}\n\ndetails[open] { \n   border-bottom: 1px solid gray;\n}",
            "title": "$:/plugins/telmiger/details/details.css",
            "tags": "$:/tags/Stylesheet",
            "modifier": "Thomas Elmiger",
            "modified": "20170127123837808",
            "creator": "Thomas Elmiger",
            "created": "20170122140815442"
        },
        "$:/plugins/telmiger/details/details.js": {
            "text": "/*\\\ntitle: $:/plugins/telmiger/details/details.js\ntype: application/javascript\nmodule-type: widget\n\nDetails widget v 0.6.1\n\nWill output an HTML 5 <details> section including a <summary>\n\n```\n\t<details>\n\t\t<summary>This sums it up</summary> \n\t\t<span>All the details follow here.</span>\n\t</details>\n```\n\n|Parameter |Description |h\n|summary |Optional text to display as summary. Wins over field (see below). |\n|open |Optional initial state, set to \"open\" to show details on load. Defaults to \"\". |\n|state |An optional TextReference containing the state. Wins over open. |\n|field |Optionally, the summary is taken from the field with this name in a given tiddler. Defaults to \"title\". |\n|tiddler |Optional title of a tiddler to watch, connected to field. Defaults to current tiddler. |\n|class |Optional CSS classes to be assigned to the details tag. |\n\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar DetailsWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nDetailsWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nDetailsWidget.prototype.render = function(parent,nextSibling) {\n\t// Save the parent dom node\n\tthis.parentDomNode = parent;\n\t// Compute our attributes\n\tthis.computeAttributes();\n\t// Execute our logic\n\tthis.execute();\n\t// Create our elements\n\tthis.detailsDomNode = this.document.createElement(\"details\");\n\tthis.detailsDomNode.setAttribute(\"class\",this.detailsClass);\n\tif(this.detailsOpen == \"open\") {\n\t\tthis.detailsDomNode.setAttribute(\"open\",\"open\");\n\t}\n\tif(this.detailsSummary !== \"\") {\n\t\tthis.summaryDomNode = this.document.createElement(\"summary\");\n\t\tthis.detailsDomNode.appendChild(this.summaryDomNode);\n\t\tthis.summaryDomNode.appendChild(this.document.createTextNode(this.detailsSummary));\n\t}\n\tthis.spanDomNode = this.document.createElement(\"span\");\n\tthis.detailsDomNode.appendChild(this.spanDomNode);\n// register an event listener?\n/* Maybe this can be reactivated later, see below. Remember to change back inverted toggle logic too.\n\tif(this.detailsStateTitle) {\n\t\t$tw.utils.addEventListeners(this.detailsDomNode,[\n\t\t\t{name: \"toggle\", handlerObject: this, handlerMethod: \"handleToggleEvent\"},\n\t\t]);\n\t}\n*/\n// As iOS mobile browsers lack support of toggle events on details \n// we emulate the toggle event using click\n\tif(this.detailsStateTitle && this.summaryDomNode) {\n\t\t$tw.utils.addEventListeners(this.summaryDomNode,[\n\t\t\t{name: \"click\", handlerObject: this, handlerMethod: \"handleToggleEvent\"},\n\t\t]);\n\t} else {\n\t\tif(this.detailsStateTitle) {\n\t\t\t$tw.utils.addEventListeners(this.detailsDomNode,[\n\t\t\t\t{name: \"click\", handlerObject: this, handlerMethod: \"handleToggleEvent\"},\n\t\t\t]);\n\t\t}\n\t}\n\t// Insert the details into the DOM and render any children\n\tthis.parentDomNode.insertBefore(this.detailsDomNode,nextSibling);\n\tthis.renderChildren(this.spanDomNode,null);\n\tthis.domNodes.push(this.detailsDomNode);\n};\n\n/*\nRetrieve the value of the summary\n*/\nDetailsWidget.prototype.getSummary = function() {\n\tvar value = \"\";\n\tif(this.summaryTitle === \"\" && this.summaryField === \"\" && \n\t   this.detailsSummary === \"\") {\n\t\tvalue = \"\";\n\t} else {\n\t\tvar tiddler = this.wiki.getTiddler(this.summaryTitle) || this.wiki.getTiddler(this.getVariable(\"currentTiddler\"));\n\t\tif(this.summaryField !== \"\") {\n\t\t\tif(this.summaryField === \"text\") {\n            \t\t\t// Calling getTiddlerText() triggers lazy loading of skinny tiddlers\n\t\t\t\tvalue = this.wiki.getTiddlerText(this.summaryTitle);\n\t\t\t} else {\n\t\t\t\t if(this.summaryField === \"title\") {\n\t\t\t\t\tvalue = this.summaryTitle;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = tiddler.fields[this.summaryField];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t    // no field specified, use title\n\t\t\tvalue = tiddler.fields[\"title\"];\n\t\t}\n\t}\n    \treturn value;\n};\n\n/*\nRetrieve the value of the state text reference\n*/\nDetailsWidget.prototype.getStateFromReference = function() {\n    var state = this.detailsStateTitle ? this.wiki.getTextReference(this.detailsStateTitle,\"\",this.getVariable(\"currentTiddler\")) : \"\";\n    return state;\n};\n\n/*\nCheck all open signals, state fields/tiddlers get priority\n*/\nDetailsWidget.prototype.getOpenState = function() {\n\tvar result = \"\";\n\tif((this.detailsOpenDefault !== \"\" && this.detailsOpenDefault !== \"no\") \n\t    || this.detailsState === \"open\") {\n\t\tresult = \"open\";\n\t } \n\tif(this.detailsStateTitle !==\"\" && this.detailsState !== \"open\") {\n\t\tresult = \"\";\n\t}\n\treturn result;\n}\n\n/*\nUpdate the state text reference after click event\n*/\nDetailsWidget.prototype.updateState = function(openState) {\n\tvar fieldValue = \"false\";\n\tvar currentTiddler = this.getVariable(\"currentTiddler\");\n    // get the title for the (existing/new) tiddler\n\tvar tr = $tw.utils.parseTextReference(this.detailsStateTitle);\n\tvar tidTitle = tr.title || currentTiddler;\n    // is it an existing state tiddler?\n\tvar isStateTiddler = (tr.title === this.detailsStateTitle);\n\tvar hasStateTiddler = this.wiki.tiddlerExists(tr.title);\n\tvar currentStateTiddler = (tr.title === currentTiddler);\n\tif(isStateTiddler || hasStateTiddler || (currentStateTiddler && tr.field !== \"text\")) { \n\t\t// Set the state field (but never overwrite the current tiddler’s text field\n\t\tthis.wiki.setText(tidTitle,tr.field,tr.index,openState);\n\t} else {\n\t    \t// Set or create the tiddler if specified (but do not overwrite current tiddler by accident)\n\t\tif(!hasStateTiddler && tidTitle !== currentTiddler) {\n\t\t\tthis.wiki.addTiddler(new $tw.Tiddler(\n\t\t\t\tthis.wiki.getCreationFields(),\n\t\t\t\tthis.wiki.getModificationFields(),\n\t\t\t\t{\n\t\t\t\t\ttitle: tidTitle,\n\t\t\t\t\ttags: []\n\t\t\t\t}\n\t\t\t));\n\t\t\tthis.wiki.setText(tidTitle,tr.field,tr.index,openState);\n\t\t} \n\t}\n};\n\n/*\nSet openState according to click\n*/\nDetailsWidget.prototype.handleToggleEvent = function(event) {\n//     console.log (\"event registered\");\n/* Maybe normal logic can be reactivated later when toggle is supported, see section rendering above\n\tvar state = this.detailsDomNode.open ? \"open\" : \"\";\n*/\n\tvar state = this.detailsDomNode.open ? \"\" : \"open\";\n\t// update only, if the node has a new state\n\tif(state !== this.detailsState) {\n\t\tthis.updateState(state);\n\t}\n};\n\n/*\nCompute the internal state of the widget\n*/\nDetailsWidget.prototype.execute = function() {\n\t// Get the parameters from the attributes \n\tthis.summaryTitle = this.getAttribute(\"tiddler\",\"\");\n\tthis.summaryField = this.getAttribute(\"field\",\"\");\n\tthis.detailsSummary = this.getAttribute(\"summary\",\"\");\n\tif(this.detailsSummary === \"\") {\n\t\tthis.detailsSummary = this.getSummary();\n\t}\n\tthis.detailsStateTitle = this.getAttribute(\"state\",\"\");\n\tthis.detailsState = this.getStateFromReference();\n\tthis.detailsOpenDefault = this.getAttribute(\"open\",\"\");\n\tthis.detailsOpen = this.getOpenState();\n\tthis.detailsClass = this.getAttribute(\"class\",\"\");\n\tif(this.detailsClass !== \"\") {\n\t\tthis.detailsClass += \" \";\n\t}\n\tthis.detailsClass += \"tc-details\";\n\t// Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nDetailsWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.summary || changedAttributes.state || changedAttributes.open || changedAttributes[\"class\"]) {\n    // paused:  || changedTiddlers[this.summaryTitle]\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\tvar refreshed = false;\n\t\tvar testState = this.getStateFromReference();\n\t\tif(testState !== this.detailsState) {\n\t\t\t// state change\n\t\t\tthis.refreshSelf();\n\t\t\trefreshed = true;\n\t\t} \n\t\treturn this.refreshChildren(changedTiddlers) || refreshed;\n\t}\n};\n\nexports.details = DetailsWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/telmiger/details/details.js",
            "tags": "Plugins",
            "module-type": "widget",
            "modifier": "Thomas Elmiger",
            "modified": "20170205211040196",
            "creator": "Thomas Elmiger",
            "created": "20170124173619910"
        },
        "$:/plugins/telmiger/details/icon": {
            "text": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64.003\" height=\"64.003\" viewBox=\"-500.5 395.5 64.003 64.003\"><path d=\"M-468.5 396.5l26.426 15.5v31l-26.425 15.5-26.426-15.5v-31l26.427-15.5z\"/><path fill=\"#FFF\" d=\"M-485.996 419.088h34.99v16.824h-34.99z\"/><path fill=\"#E2001A\" d=\"M-468.5 405.5c-12.15 0-22 9.85-22 22s9.85 22 22 22 22-9.85 22-22-9.85-22-22-22zm13.11 21.637c-1.022.682-2.674 1.023-4.954 1.023h-2.838c-1.505 0-2.598.3-3.28.9-.68.6-1.22 1.804-1.622 3.615 0 0-.063.526-.178.526s-.13-.31-.184-.562c-.056-.263-.14-.59-.256-.977-.224-.758-.447-1.332-.67-1.72-.27-.482-.613-.87-1.024-1.165-.412-.294-.883-.47-1.413-.528l-.74-.088h-3.637c-2.178 0-3.796-.343-4.855-1.024-1.764-1.12-2.71-3.24-2.842-6.357-.01-.25 0-.48.047-.772h.208c.142 1.41 1.304 2.502 2.158 3.274.853.77 2.222 1.155 4.104 1.155h3.3c1.896 0 3.28.436 4.158 1.306.79.786 1.31 2.017 1.56 3.69.028.183.012.263.064.263.053 0 .04-.09.06-.278.253-2.173 1.094-3.627 2.522-4.363.88-.46 2.28-.676 4.196-.652l2.257.035c1.527.023 2.814-.278 3.86-.908 1.046-.63 2.285-1.803 2.425-3.52h.21c.065.17.057.56.045.828-.13 3.105-1.023 5.206-2.68 6.3z\"/></svg>",
            "type": "image/svg+xml",
            "title": "$:/plugins/telmiger/details/icon",
            "tags": "",
            "modified": "20170205210153633",
            "created": "20170205205314072"
        },
        "$:/plugins/telmiger/details/license": {
            "created": "20170205213335455",
            "text": "!! Plugin license\n!!!The MIT License (MIT)\n\n```\nCopyright © 2017 Thomas Elmiger – thomas-elmiger.ch\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```",
            "title": "$:/plugins/telmiger/details/license",
            "tags": "",
            "modified": "20170205214435064"
        },
        "$:/plugins/telmiger/details/readme": {
            "created": "20170205212323032",
            "text": "! ~DetailsWidget\n\nA plugin for [[TiddlyWiki|http://tiddlywiki.com]] 5 containing a script and some styles, that creates an HTML 5 `<details>` section including a `<summary>`. \n\n<<<\nThe [[details|http://w3c.github.io/html/interactive-elements.html#elementdef-details]] element represents a disclosure widget from which the user can obtain additional information or controls.\n<<< W3C\n\nDocumentation can be found at http://tid.li/tw5/plugins.html#DetailsWidget\n",
            "title": "$:/plugins/telmiger/details/readme",
            "tags": "",
            "modified": "20170205212914820"
        }
    }
}