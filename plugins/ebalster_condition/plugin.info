{
    "created": "20171230044033218",
    "list": "readme license changelog",
    "modified": "20171230165413285",
    "plugin-type": "plugin",
    "revision": "0",
    "tags": "",
    "title": "$:/plugins/ebalster/condition",
    "type": "application/json",
    "version": "0.1.2",

    "tiddlers": {
        "$:/plugins/ebalster/condition/changelog": {
            "text": "!!Version 0.1.1 — December 30, 2017\n\n* Fix an error when refreshing the condition widget.\n* Fix \"match\" attribute not working as expected.\n\n\n!!Version 0.1.0 — December 29, 2017\n\n* Initial implementation.\n* Includes $if, $else, $else-if\n* Common code in condition.js",
            "title": "$:/plugins/ebalster/condition/changelog",
            "tags": "",
            "modified": "20171230165117169",
            "created": "20171230164920491"
        },
        "$:/plugins/ebalster/condition/license": {
            "text": "!!The MIT License (MIT)\n\nCopyright (c) 2017 Evan Balster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/condition/license",
            "tags": "",
            "revision": "0",
            "modified": "20171230044506791",
            "created": "20171230044445712",
            "caption": "license"
        },
        "$:/plugins/ebalster/condition/readme": {
            "text": "The ''Condition'' plugin for TiddlyWiki, version {{$:/plugins/ebalster/condition!!version}}, by Evan Balster.\n\nThis plugin defines widgets that will either show or hide their contents depending on a condition.\n\nUnlike the closely-related reveal widget, condition widgets do //not// retain their content, and do not support animation or popups.  Conditions may be based on variables, macros or filtered attributes.  It can also be used with the [[Formula Plugin]].\n\n\n!!Truthiness\n\nTruthiness is a simple rule for whether a value triggers an \"if\" widget or not.  Values are \"truthy\" if they do not match any of the \"falsy\" values below:\n\n* The number `0`, including any decimal point.\n* `false`\n* `undefined`\n* `null`\n* Blank (no text)\n\nThis matching is case-insensitive, and any whitespace before or after the value will be ignored.\n\n\n!!If Widget\n\nThe `$if` widget will show its content based on whether a value is \"truthy\", or matches another value.\n\n|Attribute|Meaning|h\n|value|''Required.'' Content is shown if `value` is truthy.|\n|match|Optional. If present, `value` and `match` must equal //exactly// for content to be shown. (Truthiness doesn't matter.)|\n|not|Inverts the condition, so the value will be shown if it would be hidden and vice versa.|\n\nFor example,\n\n```\n<$if not value={{$:/StoryList}}>\nNo tiddlers are open right now!\n</$if>\n```\n\n\n!!Else Widget\n\nThe `$else` widget has no attributes.  It must be placed after one of the conditional widgets listed below, and will only show its contents if the preceding widget is //not// showing its content.\n\n|After...|Show contents when...|h\n|`$if`<br/>`$else-if`|None of the previous if-conditions was true.|\n|`$list`|The list is empty. `$else` can be used instead of emptyMessage.|\n|`$reveal`|The contents of the reveal widget are hidden.|\n|`$else`|An else after an else will //never// be shown.|\n\nFor example:\n\n```\n<$if value={{{[tag[Note]]}}}>\n!!My notes:\n  <$list filter=\"[tag[Note]]\">\n    - {{!!title}}\n  </$list>\n</$if>\n<$else>\n!!I don't have any notes...\n</$else>\n```\n\nNote that the else widget can't have any blank lines between it and the preceding widget.\n\n\n!!Else-If Widget\n\nThe `$else-if` widget is a combination of the `$else` and `$if` widgets, and has the same attributes as the `$if` widget.  Its content will only be displayed if the previous widget is //not// showing its content //and// the `$if`-condition is true.\n\n`$else-if` widgets can be used to perform a \"chain\" of tests, showing some text based on the first condition that passes (or fails).  For example:\n\n```\nSomething approaches...\n\n<$if      value={{!!animal}} match=cat>  Meow!  </$if>\n<$else-if value={{!!animal}} match=dog>  Bark!  </$else-if>\n<$else-if value={{!!animal}} match=bird> Tweet! </$else-if>\n<$else> This isn't like any animal you've seen before. </$else>\n```\n\n\n!!Help & Support\n\nThis plugin is a work in progress; seek help with it on the TiddlyWiki Google Group:  https://groups.google.com/forum/#!forum/tiddlywiki\n\nOr E-mail me directly: [[evan@imitone.com|mailto://evan@imitone.com]]",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/condition/readme",
            "tags": "",
            "revision": "0",
            "modified": "20171230052355854",
            "created": "20171230044517252",
            "caption": "readme"
        },
        "$:/plugins/ebalster/condition/repack": {
            "text": "Repacking command (use this in the browser console to repack the plugin)\n\n<pre><code>$tw.utils.repackPlugin(\"$:/plugins/ebalster/condition\", (= \"[\" & textjoin(\",\",\n TRUE,\n [prefix[$:/plugins/ebalster/condition/]addprefix[\"]addsuffix[\"]]) & \"]\" =));\n</code></pre>\n\nVersion: <$edit-text tiddler=\"$:/plugins/ebalster/condition\" field=\"version\" />",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/condition/repack",
            "tags": "",
            "revision": "0",
            "modified": "20171230165309317",
            "created": "20171230044112191"
        },
        "$:/plugins/ebalster/condition/widgets/condition.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/condition/widgets/condition.js\ntype: application/javascript\nmodule-type: widget\n\nBase class for condition widgets.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ConditionWidget = function(parseTreeNode,options) {\n\tif(arguments.length > 0) {\n\t\tthis.initialise(parseTreeNode,options);\n\t}\n};\n\n/*\nInherit from the base widget class\n*/\nConditionWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nConditionWidget.prototype.render = function(parent,nextSibling) {\n    this.parentDomNode = parent;\n    this.computeAttributes();\n    this.execute();\n    this.rerender(parent,nextSibling);\n};\n\nConditionWidget.prototype.rerender = function(parent,nextSibling) {\n\tthis.removeChildDomNodes();\n\tif (this.conditionError) {\n\t\t// Show an error.\n\t\tvar parseTreeNodes = [{type: \"element\", tag: \"span\", attributes: {\n\t\t\t\"class\": {type: \"string\", value: \"tc-error\"}\n\t\t}, children: [\n\t\t\t{type: \"text\", text: this.conditionError}\n\t\t]}];\n\t\tthis.makeChildWidgets(parseTreeNodes);\n\t}\n\telse if (this.isOpen) {\n\t\t// Construct and render the child widgets.\n\t\tthis.makeChildWidgets(this.parseTreeNode.children);\n\t}\n\telse {\n\t\t// Destroy the child widgets.\n\t\tthis.children = [];\n\t}\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget (default behavior)\n*/\nConditionWidget.prototype.execute = function() {\n\tthis.executeIf(\"$condition\");\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nConditionWidget.prototype.refresh = function(changedTiddlers) {\n\tvar currentlyOpen = this.isOpen;\n\tvar changedAttributes = this.computeAttributes();\n\tthis.execute();\n\tif(this.isOpen !== currentlyOpen) {\n\t\tvar nextSibling = this.findNextSiblingDomNode();\n\t\tthis.rerender(this.parentDomNode,nextSibling);\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nUtility: Is a value \"truthy\"?\n*/\nConditionWidget.prototype.valueIsTruthy = function(value) {\n\t// It's truthy if it's not falsy, ie, undefined, false, blank or zero.\n\treturn !(/^\\s*(undefined|false|null|0+|0*\\.0+|0+\\.0*|)\\s*$/i.test(value));\n};\n\n/*\nUtility: Find a preceding non-text widget for an \"else\" widget.\n*/\nConditionWidget.prototype.findPrecedingConditionWidget = function() {\n\tvar siblings = (this.parentWidget ? this.parentWidget.children : null);\n\tvar sibling;\n\tif (siblings) {\n\t\tfor (var i = siblings.indexOf(this)-1; i >= 0; --i) {\n\t\t\tsibling = siblings[i];\n\t\t\tif (sibling.parseTreeNode.type == \"text\") continue;\n\t\t\tif (sibling.isOpen != null || sibling.list != null) return sibling;\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn null;\n};\n\n/*\nUtility: Test if another widget triggers an \"else\"; ie, false conditions, closed reveals, empty lists.\n*/\nConditionWidget.prototype.widgetTriggersElse = function(widget) {\n\t// Condition widgets\n\tif (widget.triggerElse != null) return widget.triggerElse;\n\t// Reveal widget\n\tif (widget.isOpen != null) return !widget.isOpen;\n\t// List widget\n\tif (widget.list != null) return (widget.list instanceof Array) && widget.list.length == 0;\n};\n\n/*\nUtility: Execute as an \"else\" condition, computing isOpen and conditionError accordingly.\n*/\nConditionWidget.prototype.executeElse = function(widgetName) {\n\tthis.isOpen = false;\n\tthis.conditionError = null;\n\tthis.triggerElse = false;\n\tvar predicate = this.findPrecedingConditionWidget();\n\tif (!predicate) {\n\t\tthis.conditionError = (widgetName||\"$else\") + \" widget must follow $if, $else-if, $reveal or $list.\";\n\t\treturn;\n\t}\n\tthis.isOpen = this.widgetTriggersElse(predicate);\n};\n\n/*\nUtility: Execute as an \"if\" condition, computing isOpen and conditionError accordingly.\n*/\nConditionWidget.prototype.executeIf = function(widgetName) {\n\tthis.isOpen = false;\n\tthis.conditionError = null;\n\tthis.triggerElse = false;\n    // Re-check our \"if\" condition.\n\tvar value = this.getAttribute(\"value\");\n\tvar match = this.getAttribute(\"match\");\n\tif (value == null) {\n\t\tthis.conditionError = (widgetName||\"$condition\") + \" widget requires a 'value' attribute.\";\n\t\treturn;\n\t}\n\telse if (match == null) {\n\t\t// Open if the value is truthy.\n\t\tthis.isOpen = this.valueIsTruthy(value);\n\t}\n\telse {\n\t\tthis.isOpen = (value == match);\n\t}\n\tif (this.getAttribute(\"not\")) {\n\t\tthis.isOpen = !this.isOpen;\n\t}\n\tthis.triggerElse = !this.isOpen;\n};\n\nexports.condition = ConditionWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/condition/widgets/condition.js",
            "tags": "",
            "revision": "0",
            "module-type": "widget",
            "modified": "20171230024403999",
            "description": "As the $vars widget, but each attribute is interpreted as a formula.",
            "created": "20171230024342810"
        },
        "$:/plugins/ebalster/condition/widgets/elif.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/condition/widgets/if.js\ntype: application/javascript\nmodule-type: widget\n\nIf-condition widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar ConditionWidget = require(\"$:/plugins/ebalster/condition/widgets/condition.js\").condition;\n\nvar ElifWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nElifWidget.prototype = new ConditionWidget();\n\n/*\nCompute the internal state of the widget\n*/\nElifWidget.prototype.execute = function() {\n\tthis.executeElse(\"$else-if\");\n\tif (this.isOpen) this.executeIf(\"$if\");\n};\n\nexports[\"else-if\"] = ElifWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/condition/widgets/elif.js",
            "tags": "",
            "revision": "0",
            "module-type": "widget",
            "modified": "20171230040911552",
            "description": "As the $vars widget, but each attribute is interpreted as a formula.",
            "created": "20171230040903429"
        },
        "$:/plugins/ebalster/condition/widgets/else.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/condition/widgets/if.js\ntype: application/javascript\nmodule-type: widget\n\nIf-condition widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar ConditionWidget = require(\"$:/plugins/ebalster/condition/widgets/condition.js\").condition;\n\nvar ElseWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nElseWidget.prototype = new ConditionWidget();\n\n/*\nCompute the internal state of the widget\n*/\nElseWidget.prototype.execute = function() {\n\t// Execute as an else condition.\n\tthis.executeElse(\"$else\");\n};\n\nexports.else = ElseWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/condition/widgets/else.js",
            "tags": "",
            "revision": "0",
            "module-type": "widget",
            "modified": "20171230025331858",
            "description": "As the $vars widget, but each attribute is interpreted as a formula.",
            "created": "20171230025320439"
        },
        "$:/plugins/ebalster/condition/widgets/if.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/condition/widgets/if.js\ntype: application/javascript\nmodule-type: widget\n\nIf-condition widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar ConditionWidget = require(\"$:/plugins/ebalster/condition/widgets/condition.js\").condition;\n\nvar IfWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nIfWidget.prototype = new ConditionWidget();\n\n/*\nCompute the internal state of the widget\n*/\nIfWidget.prototype.execute = function() {\n\tthis.executeIf(\"$if\");\n};\n\nexports.if = IfWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/condition/widgets/if.js",
            "tags": "",
            "revision": "0",
            "module-type": "widget",
            "modified": "20171230004310622",
            "description": "As the $vars widget, but each attribute is interpreted as a formula.",
            "created": "20171230002741585"
        }
    }
}