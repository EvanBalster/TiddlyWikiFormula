created: 20171213021420297
modified: 20180114000749649
tags: Developer
title: Extending Formulas
type: text/vnd.tiddlywiki

<<<
''Warning'': The internal code of the Formulas may still change in a way that breaks extensions.  Be prepared to maintain your additions if necessary.
<<<

!Defining new functions

Functions are loaded from tiddlers with `module-type: formula-function` at startup.

Each function is assigned as a field of the module's `exports` object.

Formula-Functions are usually expressed as JavaScript functions accepting some [[Value Objects|Value Object]] as arguments and returning a [[Value Object]] as a result.  Functions may throw (string) exceptions if there is a problem.

Formula-Functions that behave differently based on the arguments are expressed as objects with the following fields:

|Property|Meaning|h
|select|Function taking one argument, "operands", that returns the function to be used.  The selection is usually based on the number of arguments.|
|construct||
|min_args|Optional minimum number of arguments.  Defaults to zero.|
|min_args|Optional maximum number of arguments.  Defaults to unlimited.|

Either select or construct must be defined.

See the existing function tiddlers for a starting point:

<$list filter="[prefix[$:/plugins/ebalster/formula/functions/]]">
<$link>{{!!title}}</$link><br/>
</$list>

In the future, conventions for value conversion may change.  Currently, all values are encapsulated in `V_***` objects, and must be converted to usable data using `as***` methods.  This is being reconsidered.


!Defining new operators

Operators are defined as objects with a small number of properties, and are loaded from tiddlers with `module-type: formula-operator` at startup.

Internally, all operators are converted to functions by the formula compiler.

```
10*3+4^2*2
```

is equivalent to

```
add(multiply(10,3), multiply(pow(4,2), 2))
```

Each function is assigned as a field of the module's `exports` object.

Formula-Operators are expressed as objects with the following properties:

|Property|Meaning|h
| `arity`|Required.  The number of operands the operator uses.  1 means unary, 2 means binary.  Other numbers are not supported at the moment.|
| `operator`|Required.  The operator's symbol, expressed as a string.  Should include only symbolic characters, and no spaces.|
| `function`|Required.  The function to convert the operator into.  Should be a directly-defined formula-function taking `arity` arguments.|
| `precedence`|Required for binary operators.  Determines order of operations.|
| `associativity`|Optional.  Assign `"right"` to evaluate a binary operator right-to-left rather than left-to-right (the default).|
| `position`|Required for unary operators.  `"pre"` for prefix operators, `"post"` for postfix.|

Prefix unary operators are applied first, in reverse order, followed by postfix unary operators in forward order, followed by binary operators.  The predefined binary operators use this order:

|Category|Operators|Precedence|Associativity|h
|Exponents|`^`|30|right*|
|Multiplication|`* /`|20||
|Addition|`+ -`|10||
|Concatenation|`&`|4||
|Comparison|`= < <= > >= <>`|0||

^^* Right-associativity is not supported yet, but will be in the future.^^


See the existing operators for a starting point:

<$list filter="[prefix[$:/plugins/ebalster/formula/operators/]]">
<$link>{{!!title}}</$link><br/>
</$list>