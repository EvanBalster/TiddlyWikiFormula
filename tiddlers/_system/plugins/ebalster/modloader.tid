created: 20180121175311334
list: about patchmaker status
modified: 20180124005029126
plugin-priority: 1
plugin-type: plugin
tags: 
title: $:/plugins/ebalster/modloader
type: application/json
version: 0.0.3

{
    "tiddlers": {
        "$:/core/modules/startup.js": {
            "text": "/*\\\ntitle: $:/core/modules/startup.js\ntype: application/javascript\nmodule-type: startup\n\nMiscellaneous startup logic for both the client and server.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"startup\";\nexports.after = [\"load-modules\"];\nexports.synchronous = true;\n\n// Set to `true` to enable performance instrumentation\nvar PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE = \"$:/config/Performance/Instrumentation\";\n\n// MODLOADER FIX var widget = require(\"$:/core/modules/widgets/widget.js\");\n\nexports.startup = function() {\n\tvar widget = require(\"$:/core/modules/widgets/widget.js\"); // MODLOADER FIX\n\tvar modules,n,m,f;\n\t// Minimal browser detection\n\tif($tw.browser) {\n\t\t$tw.browser.isIE = (/msie|trident/i.test(navigator.userAgent));\n\t\t$tw.browser.isFirefox = !!document.mozFullScreenEnabled;\n\t}\n\t// Platform detection\n\t$tw.platform = {};\n\tif($tw.browser) {\n\t\t$tw.platform.isMac = /Mac/.test(navigator.platform);\n\t\t$tw.platform.isWindows = /win/i.test(navigator.platform);\n\t\t$tw.platform.isLinux = /Linux/i.test(navigator.appVersion);\n\t} else {\n\t\tswitch(require(\"os\").platform()) {\n\t\t\tcase \"darwin\":\n\t\t\t\t$tw.platform.isMac = true;\n\t\t\t\tbreak;\n\t\t\tcase \"win32\":\n\t\t\t\t$tw.platform.isWindows = true;\n\t\t\t\tbreak;\n\t\t\tcase \"freebsd\":\n\t\t\t\t$tw.platform.isLinux = true;\n\t\t\t\tbreak;\n\t\t\tcase \"linux\":\n\t\t\t\t$tw.platform.isLinux = true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t// Initialise version\n\t$tw.version = $tw.utils.extractVersionInfo();\n\t// Set up the performance framework\n\t$tw.perf = new $tw.Performance($tw.wiki.getTiddlerText(PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE,\"no\") === \"yes\");\n\t// Kick off the language manager and switcher\n\t$tw.language = new $tw.Language();\n\t$tw.languageSwitcher = new $tw.PluginSwitcher({\n\t\twiki: $tw.wiki,\n\t\tpluginType: \"language\",\n\t\tcontrollerTitle: \"$:/language\",\n\t\tdefaultPlugins: [\n\t\t\t\"$:/languages/en-US\"\n\t\t],\n\t\tonSwitch: function(plugins) {\n\t\t\tif($tw.browser) {\n\t\t\t\tvar pluginTiddler = $tw.wiki.getTiddler(plugins[0]);\n\t\t\t\tif(pluginTiddler) {\n\t\t\t\t\tdocument.documentElement.setAttribute(\"dir\",pluginTiddler.getFieldString(\"text-direction\") || \"auto\");\n\t\t\t\t} else {\n\t\t\t\t\tdocument.documentElement.removeAttribute(\"dir\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\t// Kick off the theme manager\n\t$tw.themeManager = new $tw.PluginSwitcher({\n\t\twiki: $tw.wiki,\n\t\tpluginType: \"theme\",\n\t\tcontrollerTitle: \"$:/theme\",\n\t\tdefaultPlugins: [\n\t\t\t\"$:/themes/tiddlywiki/snowwhite\",\n\t\t\t\"$:/themes/tiddlywiki/vanilla\"\n\t\t]\n\t});\n\t// Kick off the keyboard manager\n\t$tw.keyboardManager = new $tw.KeyboardManager();\n\t// Clear outstanding tiddler store change events to avoid an unnecessary refresh cycle at startup\n\t$tw.wiki.clearTiddlerEventQueue();\n\t// Create a root widget for attaching event handlers. By using it as the parentWidget for another widget tree, one can reuse the event handlers\n\tif($tw.browser) {\n\t\t$tw.rootWidget = new widget.widget({\n\t\t\ttype: \"widget\",\n\t\t\tchildren: []\n\t\t},{\n\t\t\twiki: $tw.wiki,\n\t\t\tdocument: document\n\t\t});\n\t}\n\t// Find a working syncadaptor\n\t$tw.syncadaptor = undefined;\n\t$tw.modules.forEachModuleOfType(\"syncadaptor\",function(title,module) {\n\t\tif(!$tw.syncadaptor && module.adaptorClass) {\n\t\t\t$tw.syncadaptor = new module.adaptorClass({wiki: $tw.wiki});\n\t\t}\n\t});\n\t// Set up the syncer object if we've got a syncadaptor\n\tif($tw.syncadaptor) {\n\t\t$tw.syncer = new $tw.Syncer({wiki: $tw.wiki, syncadaptor: $tw.syncadaptor});\n\t} \n\t// Setup the saver handler\n\t$tw.saverHandler = new $tw.SaverHandler({wiki: $tw.wiki, dirtyTracking: !$tw.syncadaptor});\n\t// Host-specific startup\n\tif($tw.browser) {\n\t\t// Install the popup manager\n\t\t$tw.popup = new $tw.utils.Popup();\n\t\t// Install the animator\n\t\t$tw.anim = new $tw.utils.Animator();\n\t}\n};\n\n})();\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/core/modules/startup.js",
            "module-type": "startup",
            "modified": "20180123222427087",
            "created": "20180123222302495"
        },
        "$:/plugins/ebalster/modloader/about": {
            "text": "The ''Mod-Loader Plugin'' is a powerful meta-plugin for TiddlyWiki which facilitates plugins including the TiddlyWiki core to be modified at load-time.  This allows for the creation of plugins that modify the TiddlyWiki core but can maintain compatibility with newer versions of the core.\n\nMods can only affect shadow tiddlers.  `startup` modules cannot be meaningfully patched at this time.\n\n\n!!Installing Mods\n\nInstalling mods is simple.  Simply install the modloader plugin and any mod plugins.  Alternatively, patch tiddlers may be installed directly into your wiki.\n\n<<<\nTo install the modloader plugin, drag-and-drop this to your wiki:\n\n{{$:/plugins/ebalster/modloader||$:/core/ui/Components/plugin-info}}\n<<<\n\n\n!!Limitations and Conflicts\n\nIt may not be able to apply a patch due to conflicts with another patch or changes in the specific part of a file a patch is meant to modify.  Currently, if //any// patch fails to apply, the modloader will abort completely and a warning will be displayed on startup.  This avoids a situation where only certain changes are applied and the resulting code is non-functional.\n\nFuture versions of the modloader may introduce a concept of patch \"groups\", where only those changes in a given group will be aborted upon failure or conflict.\n\nThe modloader can patch the TiddlyWiki core, as well as other plugins, in principle.  However, it //cannot// currently patch plugins that do not define any `plugin-priority`.  In the future we may investigate lifting this limitation.\n\n\n!!Creating Mods\n\nA mod is a collection of Patch Tiddlers (see below) which is usually packaged as a plugin.  To generate a mod, use the [[Mod Maker Utility|$:/plugins/ebalster/modloader/modmaker]].\n\n\n!!Patch Tiddlers\n\nA patch tiddler is a tiddler with its `modloader-target` field set to the title of a shadow tiddler which it modifies.\n\n\n!!Technical Explanation\n\nThe modloader patch runs before TiddlyWiki's startup modules, finds all tiddlers with a defined `modloader-target` field whose type is `text/x-patch` and applies the changes to the corresponding targets' text.  The changed tiddlers are packaged into a new plugin `$:/temp/modloader-plugin` which is immediately added to the wiki.\n\nPatches are applied only to shadow tiddlers, and the tiddlers produced by the modloader are also shadows.  Thus, it is not possible for the modloader to affect non-shadow tiddlers in the wiki.\n\n\nDevelopment notes:\n\n* Can we force other startup modules to be re-eval'd?",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/modloader/about",
            "modified": "20180121183049952",
            "created": "20180120061330117"
        },
        "$:/plugins/ebalster/modloader/alert": {
            "text": "!!{{!!header}}\n\n{{!!notices}}\n\n[[See Mod Loader Log|$:/temp/mod-plugin/status]].",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/modloader/alert",
            "tags": "",
            "modified": "20180120230058867",
            "header": "Mod Loader alert!",
            "created": "20180120194658741"
        },
        "$:/plugins/ebalster/modloader/diff_patch_match.js": {
            "text": "(function(){function diff_match_patch(){this.Diff_Timeout=1;this.Diff_EditCost=4;this.Match_Threshold=0.5;this.Match_Distance=1E3;this.Patch_DeleteThreshold=0.5;this.Patch_Margin=4;this.Match_MaxBits=32}\ndiff_match_patch.prototype.diff_main=function(a,b,c,d){\"undefined\"==typeof d&&(d=0>=this.Diff_Timeout?Number.MAX_VALUE:(new Date).getTime()+1E3*this.Diff_Timeout);if(null==a||null==b)throw Error(\"Null input. (diff_main)\");if(a==b)return a?[[0,a]]:[];\"undefined\"==typeof c&&(c=!0);var e=c,f=this.diff_commonPrefix(a,b);c=a.substring(0,f);a=a.substring(f);b=b.substring(f);var f=this.diff_commonSuffix(a,b),g=a.substring(a.length-f);a=a.substring(0,a.length-f);b=b.substring(0,b.length-f);a=this.diff_compute_(a,\nb,e,d);c&&a.unshift([0,c]);g&&a.push([0,g]);this.diff_cleanupMerge(a);return a};\ndiff_match_patch.prototype.diff_compute_=function(a,b,c,d){if(!a)return[[1,b]];if(!b)return[[-1,a]];var e=a.length>b.length?a:b,f=a.length>b.length?b:a,g=e.indexOf(f);return-1!=g?(c=[[1,e.substring(0,g)],[0,f],[1,e.substring(g+f.length)]],a.length>b.length&&(c[0][0]=c[2][0]=-1),c):1==f.length?[[-1,a],[1,b]]:(e=this.diff_halfMatch_(a,b))?(f=e[0],a=e[1],g=e[2],b=e[3],e=e[4],f=this.diff_main(f,g,c,d),c=this.diff_main(a,b,c,d),f.concat([[0,e]],c)):c&&100<a.length&&100<b.length?this.diff_lineMode_(a,b,\nd):this.diff_bisect_(a,b,d)};\ndiff_match_patch.prototype.diff_lineMode_=function(a,b,c){var d=this.diff_linesToChars_(a,b);a=d.chars1;b=d.chars2;d=d.lineArray;a=this.diff_main(a,b,!1,c);this.diff_charsToLines_(a,d);this.diff_cleanupSemantic(a);a.push([0,\"\"]);for(var e=d=b=0,f=\"\",g=\"\";b<a.length;){switch(a[b][0]){case 1:e++;g+=a[b][1];break;case -1:d++;f+=a[b][1];break;case 0:if(1<=d&&1<=e){a.splice(b-d-e,d+e);b=b-d-e;d=this.diff_main(f,g,!1,c);for(e=d.length-1;0<=e;e--)a.splice(b,0,d[e]);b+=d.length}d=e=0;g=f=\"\"}b++}a.pop();return a};\ndiff_match_patch.prototype.diff_bisect_=function(a,b,c){for(var d=a.length,e=b.length,f=Math.ceil((d+e)/2),g=f,h=2*f,j=Array(h),i=Array(h),k=0;k<h;k++)j[k]=-1,i[k]=-1;j[g+1]=0;i[g+1]=0;for(var k=d-e,q=0!=k%2,r=0,t=0,p=0,w=0,v=0;v<f&&!((new Date).getTime()>c);v++){for(var n=-v+r;n<=v-t;n+=2){var l=g+n,m;m=n==-v||n!=v&&j[l-1]<j[l+1]?j[l+1]:j[l-1]+1;for(var s=m-n;m<d&&s<e&&a.charAt(m)==b.charAt(s);)m++,s++;j[l]=m;if(m>d)t+=2;else if(s>e)r+=2;else if(q&&(l=g+k-n,0<=l&&l<h&&-1!=i[l])){var u=d-i[l];if(m>=\nu)return this.diff_bisectSplit_(a,b,m,s,c)}}for(n=-v+p;n<=v-w;n+=2){l=g+n;u=n==-v||n!=v&&i[l-1]<i[l+1]?i[l+1]:i[l-1]+1;for(m=u-n;u<d&&m<e&&a.charAt(d-u-1)==b.charAt(e-m-1);)u++,m++;i[l]=u;if(u>d)w+=2;else if(m>e)p+=2;else if(!q&&(l=g+k-n,0<=l&&(l<h&&-1!=j[l])&&(m=j[l],s=g+m-l,u=d-u,m>=u)))return this.diff_bisectSplit_(a,b,m,s,c)}}return[[-1,a],[1,b]]};\ndiff_match_patch.prototype.diff_bisectSplit_=function(a,b,c,d,e){var f=a.substring(0,c),g=b.substring(0,d);a=a.substring(c);b=b.substring(d);f=this.diff_main(f,g,!1,e);e=this.diff_main(a,b,!1,e);return f.concat(e)};\ndiff_match_patch.prototype.diff_linesToChars_=function(a,b){function c(a){for(var b=\"\",c=0,f=-1,g=d.length;f<a.length-1;){f=a.indexOf(\"\\n\",c);-1==f&&(f=a.length-1);var r=a.substring(c,f+1),c=f+1;(e.hasOwnProperty?e.hasOwnProperty(r):void 0!==e[r])?b+=String.fromCharCode(e[r]):(b+=String.fromCharCode(g),e[r]=g,d[g++]=r)}return b}var d=[],e={};d[0]=\"\";var f=c(a),g=c(b);return{chars1:f,chars2:g,lineArray:d}};\ndiff_match_patch.prototype.diff_charsToLines_=function(a,b){for(var c=0;c<a.length;c++){for(var d=a[c][1],e=[],f=0;f<d.length;f++)e[f]=b[d.charCodeAt(f)];a[c][1]=e.join(\"\")}};diff_match_patch.prototype.diff_commonPrefix=function(a,b){if(!a||!b||a.charAt(0)!=b.charAt(0))return 0;for(var c=0,d=Math.min(a.length,b.length),e=d,f=0;c<e;)a.substring(f,e)==b.substring(f,e)?f=c=e:d=e,e=Math.floor((d-c)/2+c);return e};\ndiff_match_patch.prototype.diff_commonSuffix=function(a,b){if(!a||!b||a.charAt(a.length-1)!=b.charAt(b.length-1))return 0;for(var c=0,d=Math.min(a.length,b.length),e=d,f=0;c<e;)a.substring(a.length-e,a.length-f)==b.substring(b.length-e,b.length-f)?f=c=e:d=e,e=Math.floor((d-c)/2+c);return e};\ndiff_match_patch.prototype.diff_commonOverlap_=function(a,b){var c=a.length,d=b.length;if(0==c||0==d)return 0;c>d?a=a.substring(c-d):c<d&&(b=b.substring(0,c));c=Math.min(c,d);if(a==b)return c;for(var d=0,e=1;;){var f=a.substring(c-e),f=b.indexOf(f);if(-1==f)return d;e+=f;if(0==f||a.substring(c-e)==b.substring(0,e))d=e,e++}};\ndiff_match_patch.prototype.diff_halfMatch_=function(a,b){function c(a,b,c){for(var d=a.substring(c,c+Math.floor(a.length/4)),e=-1,g=\"\",h,j,n,l;-1!=(e=b.indexOf(d,e+1));){var m=f.diff_commonPrefix(a.substring(c),b.substring(e)),s=f.diff_commonSuffix(a.substring(0,c),b.substring(0,e));g.length<s+m&&(g=b.substring(e-s,e)+b.substring(e,e+m),h=a.substring(0,c-s),j=a.substring(c+m),n=b.substring(0,e-s),l=b.substring(e+m))}return 2*g.length>=a.length?[h,j,n,l,g]:null}if(0>=this.Diff_Timeout)return null;\nvar d=a.length>b.length?a:b,e=a.length>b.length?b:a;if(4>d.length||2*e.length<d.length)return null;var f=this,g=c(d,e,Math.ceil(d.length/4)),d=c(d,e,Math.ceil(d.length/2)),h;if(!g&&!d)return null;h=d?g?g[4].length>d[4].length?g:d:d:g;var j;a.length>b.length?(g=h[0],d=h[1],e=h[2],j=h[3]):(e=h[0],j=h[1],g=h[2],d=h[3]);h=h[4];return[g,d,e,j,h]};\ndiff_match_patch.prototype.diff_cleanupSemantic=function(a){for(var b=!1,c=[],d=0,e=null,f=0,g=0,h=0,j=0,i=0;f<a.length;)0==a[f][0]?(c[d++]=f,g=j,h=i,i=j=0,e=a[f][1]):(1==a[f][0]?j+=a[f][1].length:i+=a[f][1].length,e&&(e.length<=Math.max(g,h)&&e.length<=Math.max(j,i))&&(a.splice(c[d-1],0,[-1,e]),a[c[d-1]+1][0]=1,d--,d--,f=0<d?c[d-1]:-1,i=j=h=g=0,e=null,b=!0)),f++;b&&this.diff_cleanupMerge(a);this.diff_cleanupSemanticLossless(a);for(f=1;f<a.length;){if(-1==a[f-1][0]&&1==a[f][0]){b=a[f-1][1];c=a[f][1];\nd=this.diff_commonOverlap_(b,c);e=this.diff_commonOverlap_(c,b);if(d>=e){if(d>=b.length/2||d>=c.length/2)a.splice(f,0,[0,c.substring(0,d)]),a[f-1][1]=b.substring(0,b.length-d),a[f+1][1]=c.substring(d),f++}else if(e>=b.length/2||e>=c.length/2)a.splice(f,0,[0,b.substring(0,e)]),a[f-1][0]=1,a[f-1][1]=c.substring(0,c.length-e),a[f+1][0]=-1,a[f+1][1]=b.substring(e),f++;f++}f++}};\ndiff_match_patch.prototype.diff_cleanupSemanticLossless=function(a){function b(a,b){if(!a||!b)return 6;var c=a.charAt(a.length-1),d=b.charAt(0),e=c.match(diff_match_patch.nonAlphaNumericRegex_),f=d.match(diff_match_patch.nonAlphaNumericRegex_),g=e&&c.match(diff_match_patch.whitespaceRegex_),h=f&&d.match(diff_match_patch.whitespaceRegex_),c=g&&c.match(diff_match_patch.linebreakRegex_),d=h&&d.match(diff_match_patch.linebreakRegex_),i=c&&a.match(diff_match_patch.blanklineEndRegex_),j=d&&b.match(diff_match_patch.blanklineStartRegex_);\nreturn i||j?5:c||d?4:e&&!g&&h?3:g||h?2:e||f?1:0}for(var c=1;c<a.length-1;){if(0==a[c-1][0]&&0==a[c+1][0]){var d=a[c-1][1],e=a[c][1],f=a[c+1][1],g=this.diff_commonSuffix(d,e);if(g)var h=e.substring(e.length-g),d=d.substring(0,d.length-g),e=h+e.substring(0,e.length-g),f=h+f;for(var g=d,h=e,j=f,i=b(d,e)+b(e,f);e.charAt(0)===f.charAt(0);){var d=d+e.charAt(0),e=e.substring(1)+f.charAt(0),f=f.substring(1),k=b(d,e)+b(e,f);k>=i&&(i=k,g=d,h=e,j=f)}a[c-1][1]!=g&&(g?a[c-1][1]=g:(a.splice(c-1,1),c--),a[c][1]=\nh,j?a[c+1][1]=j:(a.splice(c+1,1),c--))}c++}};diff_match_patch.nonAlphaNumericRegex_=/[^a-zA-Z0-9]/;diff_match_patch.whitespaceRegex_=/\\s/;diff_match_patch.linebreakRegex_=/[\\r\\n]/;diff_match_patch.blanklineEndRegex_=/\\n\\r?\\n$/;diff_match_patch.blanklineStartRegex_=/^\\r?\\n\\r?\\n/;\ndiff_match_patch.prototype.diff_cleanupEfficiency=function(a){for(var b=!1,c=[],d=0,e=null,f=0,g=!1,h=!1,j=!1,i=!1;f<a.length;){if(0==a[f][0])a[f][1].length<this.Diff_EditCost&&(j||i)?(c[d++]=f,g=j,h=i,e=a[f][1]):(d=0,e=null),j=i=!1;else if(-1==a[f][0]?i=!0:j=!0,e&&(g&&h&&j&&i||e.length<this.Diff_EditCost/2&&3==g+h+j+i))a.splice(c[d-1],0,[-1,e]),a[c[d-1]+1][0]=1,d--,e=null,g&&h?(j=i=!0,d=0):(d--,f=0<d?c[d-1]:-1,j=i=!1),b=!0;f++}b&&this.diff_cleanupMerge(a)};\ndiff_match_patch.prototype.diff_cleanupMerge=function(a){a.push([0,\"\"]);for(var b=0,c=0,d=0,e=\"\",f=\"\",g;b<a.length;)switch(a[b][0]){case 1:d++;f+=a[b][1];b++;break;case -1:c++;e+=a[b][1];b++;break;case 0:1<c+d?(0!==c&&0!==d&&(g=this.diff_commonPrefix(f,e),0!==g&&(0<b-c-d&&0==a[b-c-d-1][0]?a[b-c-d-1][1]+=f.substring(0,g):(a.splice(0,0,[0,f.substring(0,g)]),b++),f=f.substring(g),e=e.substring(g)),g=this.diff_commonSuffix(f,e),0!==g&&(a[b][1]=f.substring(f.length-g)+a[b][1],f=f.substring(0,f.length-\ng),e=e.substring(0,e.length-g))),0===c?a.splice(b-d,c+d,[1,f]):0===d?a.splice(b-c,c+d,[-1,e]):a.splice(b-c-d,c+d,[-1,e],[1,f]),b=b-c-d+(c?1:0)+(d?1:0)+1):0!==b&&0==a[b-1][0]?(a[b-1][1]+=a[b][1],a.splice(b,1)):b++,c=d=0,f=e=\"\"}\"\"===a[a.length-1][1]&&a.pop();c=!1;for(b=1;b<a.length-1;)0==a[b-1][0]&&0==a[b+1][0]&&(a[b][1].substring(a[b][1].length-a[b-1][1].length)==a[b-1][1]?(a[b][1]=a[b-1][1]+a[b][1].substring(0,a[b][1].length-a[b-1][1].length),a[b+1][1]=a[b-1][1]+a[b+1][1],a.splice(b-1,1),c=!0):a[b][1].substring(0,\na[b+1][1].length)==a[b+1][1]&&(a[b-1][1]+=a[b+1][1],a[b][1]=a[b][1].substring(a[b+1][1].length)+a[b+1][1],a.splice(b+1,1),c=!0)),b++;c&&this.diff_cleanupMerge(a)};diff_match_patch.prototype.diff_xIndex=function(a,b){var c=0,d=0,e=0,f=0,g;for(g=0;g<a.length;g++){1!==a[g][0]&&(c+=a[g][1].length);-1!==a[g][0]&&(d+=a[g][1].length);if(c>b)break;e=c;f=d}return a.length!=g&&-1===a[g][0]?f:f+(b-e)};\ndiff_match_patch.prototype.diff_prettyHtml=function(a){for(var b=[],c=/&/g,d=/</g,e=/>/g,f=/\\n/g,g=0;g<a.length;g++){var h=a[g][0],j=a[g][1],j=j.replace(c,\"&amp;\").replace(d,\"&lt;\").replace(e,\"&gt;\").replace(f,\"&para;<br>\");switch(h){case 1:b[g]='<ins style=\"background:#e6ffe6;\">'+j+\"</ins>\";break;case -1:b[g]='<del style=\"background:#ffe6e6;\">'+j+\"</del>\";break;case 0:b[g]=\"<span>\"+j+\"</span>\"}}return b.join(\"\")};\ndiff_match_patch.prototype.diff_text1=function(a){for(var b=[],c=0;c<a.length;c++)1!==a[c][0]&&(b[c]=a[c][1]);return b.join(\"\")};diff_match_patch.prototype.diff_text2=function(a){for(var b=[],c=0;c<a.length;c++)-1!==a[c][0]&&(b[c]=a[c][1]);return b.join(\"\")};diff_match_patch.prototype.diff_levenshtein=function(a){for(var b=0,c=0,d=0,e=0;e<a.length;e++){var f=a[e][0],g=a[e][1];switch(f){case 1:c+=g.length;break;case -1:d+=g.length;break;case 0:b+=Math.max(c,d),d=c=0}}return b+=Math.max(c,d)};\ndiff_match_patch.prototype.diff_toDelta=function(a){for(var b=[],c=0;c<a.length;c++)switch(a[c][0]){case 1:b[c]=\"+\"+encodeURI(a[c][1]);break;case -1:b[c]=\"-\"+a[c][1].length;break;case 0:b[c]=\"=\"+a[c][1].length}return b.join(\"\\t\").replace(/%20/g,\" \")};\ndiff_match_patch.prototype.diff_fromDelta=function(a,b){for(var c=[],d=0,e=0,f=b.split(/\\t/g),g=0;g<f.length;g++){var h=f[g].substring(1);switch(f[g].charAt(0)){case \"+\":try{c[d++]=[1,decodeURI(h)]}catch(j){throw Error(\"Illegal escape in diff_fromDelta: \"+h);}break;case \"-\":case \"=\":var i=parseInt(h,10);if(isNaN(i)||0>i)throw Error(\"Invalid number in diff_fromDelta: \"+h);h=a.substring(e,e+=i);\"=\"==f[g].charAt(0)?c[d++]=[0,h]:c[d++]=[-1,h];break;default:if(f[g])throw Error(\"Invalid diff operation in diff_fromDelta: \"+\nf[g]);}}if(e!=a.length)throw Error(\"Delta length (\"+e+\") does not equal source text length (\"+a.length+\").\");return c};diff_match_patch.prototype.match_main=function(a,b,c){if(null==a||null==b||null==c)throw Error(\"Null input. (match_main)\");c=Math.max(0,Math.min(c,a.length));return a==b?0:a.length?a.substring(c,c+b.length)==b?c:this.match_bitap_(a,b,c):-1};\ndiff_match_patch.prototype.match_bitap_=function(a,b,c){function d(a,d){var e=a/b.length,g=Math.abs(c-d);return!f.Match_Distance?g?1:e:e+g/f.Match_Distance}if(b.length>this.Match_MaxBits)throw Error(\"Pattern too long for this browser.\");var e=this.match_alphabet_(b),f=this,g=this.Match_Threshold,h=a.indexOf(b,c);-1!=h&&(g=Math.min(d(0,h),g),h=a.lastIndexOf(b,c+b.length),-1!=h&&(g=Math.min(d(0,h),g)));for(var j=1<<b.length-1,h=-1,i,k,q=b.length+a.length,r,t=0;t<b.length;t++){i=0;for(k=q;i<k;)d(t,c+\nk)<=g?i=k:q=k,k=Math.floor((q-i)/2+i);q=k;i=Math.max(1,c-k+1);var p=Math.min(c+k,a.length)+b.length;k=Array(p+2);for(k[p+1]=(1<<t)-1;p>=i;p--){var w=e[a.charAt(p-1)];k[p]=0===t?(k[p+1]<<1|1)&w:(k[p+1]<<1|1)&w|((r[p+1]|r[p])<<1|1)|r[p+1];if(k[p]&j&&(w=d(t,p-1),w<=g))if(g=w,h=p-1,h>c)i=Math.max(1,2*c-h);else break}if(d(t+1,c)>g)break;r=k}return h};\ndiff_match_patch.prototype.match_alphabet_=function(a){for(var b={},c=0;c<a.length;c++)b[a.charAt(c)]=0;for(c=0;c<a.length;c++)b[a.charAt(c)]|=1<<a.length-c-1;return b};\ndiff_match_patch.prototype.patch_addContext_=function(a,b){if(0!=b.length){for(var c=b.substring(a.start2,a.start2+a.length1),d=0;b.indexOf(c)!=b.lastIndexOf(c)&&c.length<this.Match_MaxBits-this.Patch_Margin-this.Patch_Margin;)d+=this.Patch_Margin,c=b.substring(a.start2-d,a.start2+a.length1+d);d+=this.Patch_Margin;(c=b.substring(a.start2-d,a.start2))&&a.diffs.unshift([0,c]);(d=b.substring(a.start2+a.length1,a.start2+a.length1+d))&&a.diffs.push([0,d]);a.start1-=c.length;a.start2-=c.length;a.length1+=\nc.length+d.length;a.length2+=c.length+d.length}};\ndiff_match_patch.prototype.patch_make=function(a,b,c){var d;if(\"string\"==typeof a&&\"string\"==typeof b&&\"undefined\"==typeof c)d=a,b=this.diff_main(d,b,!0),2<b.length&&(this.diff_cleanupSemantic(b),this.diff_cleanupEfficiency(b));else if(a&&\"object\"==typeof a&&\"undefined\"==typeof b&&\"undefined\"==typeof c)b=a,d=this.diff_text1(b);else if(\"string\"==typeof a&&b&&\"object\"==typeof b&&\"undefined\"==typeof c)d=a;else if(\"string\"==typeof a&&\"string\"==typeof b&&c&&\"object\"==typeof c)d=a,b=c;else throw Error(\"Unknown call format to patch_make.\");\nif(0===b.length)return[];c=[];a=new diff_match_patch.patch_obj;for(var e=0,f=0,g=0,h=d,j=0;j<b.length;j++){var i=b[j][0],k=b[j][1];!e&&0!==i&&(a.start1=f,a.start2=g);switch(i){case 1:a.diffs[e++]=b[j];a.length2+=k.length;d=d.substring(0,g)+k+d.substring(g);break;case -1:a.length1+=k.length;a.diffs[e++]=b[j];d=d.substring(0,g)+d.substring(g+k.length);break;case 0:k.length<=2*this.Patch_Margin&&e&&b.length!=j+1?(a.diffs[e++]=b[j],a.length1+=k.length,a.length2+=k.length):k.length>=2*this.Patch_Margin&&\ne&&(this.patch_addContext_(a,h),c.push(a),a=new diff_match_patch.patch_obj,e=0,h=d,f=g)}1!==i&&(f+=k.length);-1!==i&&(g+=k.length)}e&&(this.patch_addContext_(a,h),c.push(a));return c};diff_match_patch.prototype.patch_deepCopy=function(a){for(var b=[],c=0;c<a.length;c++){var d=a[c],e=new diff_match_patch.patch_obj;e.diffs=[];for(var f=0;f<d.diffs.length;f++)e.diffs[f]=d.diffs[f].slice();e.start1=d.start1;e.start2=d.start2;e.length1=d.length1;e.length2=d.length2;b[c]=e}return b};\ndiff_match_patch.prototype.patch_apply=function(a,b){if(0==a.length)return[b,[]];a=this.patch_deepCopy(a);var c=this.patch_addPadding(a);b=c+b+c;this.patch_splitMax(a);for(var d=0,e=[],f=0;f<a.length;f++){var g=a[f].start2+d,h=this.diff_text1(a[f].diffs),j,i=-1;if(h.length>this.Match_MaxBits){if(j=this.match_main(b,h.substring(0,this.Match_MaxBits),g),-1!=j&&(i=this.match_main(b,h.substring(h.length-this.Match_MaxBits),g+h.length-this.Match_MaxBits),-1==i||j>=i))j=-1}else j=this.match_main(b,h,g);\nif(-1==j)e[f]=!1,d-=a[f].length2-a[f].length1;else if(e[f]=!0,d=j-g,g=-1==i?b.substring(j,j+h.length):b.substring(j,i+this.Match_MaxBits),h==g)b=b.substring(0,j)+this.diff_text2(a[f].diffs)+b.substring(j+h.length);else if(g=this.diff_main(h,g,!1),h.length>this.Match_MaxBits&&this.diff_levenshtein(g)/h.length>this.Patch_DeleteThreshold)e[f]=!1;else{this.diff_cleanupSemanticLossless(g);for(var h=0,k,i=0;i<a[f].diffs.length;i++){var q=a[f].diffs[i];0!==q[0]&&(k=this.diff_xIndex(g,h));1===q[0]?b=b.substring(0,\nj+k)+q[1]+b.substring(j+k):-1===q[0]&&(b=b.substring(0,j+k)+b.substring(j+this.diff_xIndex(g,h+q[1].length)));-1!==q[0]&&(h+=q[1].length)}}}b=b.substring(c.length,b.length-c.length);return[b,e]};\ndiff_match_patch.prototype.patch_addPadding=function(a){for(var b=this.Patch_Margin,c=\"\",d=1;d<=b;d++)c+=String.fromCharCode(d);for(d=0;d<a.length;d++)a[d].start1+=b,a[d].start2+=b;var d=a[0],e=d.diffs;if(0==e.length||0!=e[0][0])e.unshift([0,c]),d.start1-=b,d.start2-=b,d.length1+=b,d.length2+=b;else if(b>e[0][1].length){var f=b-e[0][1].length;e[0][1]=c.substring(e[0][1].length)+e[0][1];d.start1-=f;d.start2-=f;d.length1+=f;d.length2+=f}d=a[a.length-1];e=d.diffs;0==e.length||0!=e[e.length-1][0]?(e.push([0,\nc]),d.length1+=b,d.length2+=b):b>e[e.length-1][1].length&&(f=b-e[e.length-1][1].length,e[e.length-1][1]+=c.substring(0,f),d.length1+=f,d.length2+=f);return c};\ndiff_match_patch.prototype.patch_splitMax=function(a){for(var b=this.Match_MaxBits,c=0;c<a.length;c++)if(!(a[c].length1<=b)){var d=a[c];a.splice(c--,1);for(var e=d.start1,f=d.start2,g=\"\";0!==d.diffs.length;){var h=new diff_match_patch.patch_obj,j=!0;h.start1=e-g.length;h.start2=f-g.length;\"\"!==g&&(h.length1=h.length2=g.length,h.diffs.push([0,g]));for(;0!==d.diffs.length&&h.length1<b-this.Patch_Margin;){var g=d.diffs[0][0],i=d.diffs[0][1];1===g?(h.length2+=i.length,f+=i.length,h.diffs.push(d.diffs.shift()),\nj=!1):-1===g&&1==h.diffs.length&&0==h.diffs[0][0]&&i.length>2*b?(h.length1+=i.length,e+=i.length,j=!1,h.diffs.push([g,i]),d.diffs.shift()):(i=i.substring(0,b-h.length1-this.Patch_Margin),h.length1+=i.length,e+=i.length,0===g?(h.length2+=i.length,f+=i.length):j=!1,h.diffs.push([g,i]),i==d.diffs[0][1]?d.diffs.shift():d.diffs[0][1]=d.diffs[0][1].substring(i.length))}g=this.diff_text2(h.diffs);g=g.substring(g.length-this.Patch_Margin);i=this.diff_text1(d.diffs).substring(0,this.Patch_Margin);\"\"!==i&&\n(h.length1+=i.length,h.length2+=i.length,0!==h.diffs.length&&0===h.diffs[h.diffs.length-1][0]?h.diffs[h.diffs.length-1][1]+=i:h.diffs.push([0,i]));j||a.splice(++c,0,h)}}};diff_match_patch.prototype.patch_toText=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=a[c];return b.join(\"\")};\ndiff_match_patch.prototype.patch_fromText=function(a){var b=[];if(!a)return b;a=a.split(\"\\n\");for(var c=0,d=/^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;c<a.length;){var e=a[c].match(d);if(!e)throw Error(\"Invalid patch string: \"+a[c]);var f=new diff_match_patch.patch_obj;b.push(f);f.start1=parseInt(e[1],10);\"\"===e[2]?(f.start1--,f.length1=1):\"0\"==e[2]?f.length1=0:(f.start1--,f.length1=parseInt(e[2],10));f.start2=parseInt(e[3],10);\"\"===e[4]?(f.start2--,f.length2=1):\"0\"==e[4]?f.length2=0:(f.start2--,f.length2=\nparseInt(e[4],10));for(c++;c<a.length;){e=a[c].charAt(0);try{var g=decodeURI(a[c].substring(1))}catch(h){throw Error(\"Illegal escape in patch_fromText: \"+g);}if(\"-\"==e)f.diffs.push([-1,g]);else if(\"+\"==e)f.diffs.push([1,g]);else if(\" \"==e)f.diffs.push([0,g]);else if(\"@\"==e)break;else if(\"\"!==e)throw Error('Invalid patch mode \"'+e+'\" in: '+g);c++}}return b};diff_match_patch.patch_obj=function(){this.diffs=[];this.start2=this.start1=null;this.length2=this.length1=0};\ndiff_match_patch.patch_obj.prototype.toString=function(){var a,b;a=0===this.length1?this.start1+\",0\":1==this.length1?this.start1+1:this.start1+1+\",\"+this.length1;b=0===this.length2?this.start2+\",0\":1==this.length2?this.start2+1:this.start2+1+\",\"+this.length2;a=[\"@@ -\"+a+\" +\"+b+\" @@\\n\"];var c;for(b=0;b<this.diffs.length;b++){switch(this.diffs[b][0]){case 1:c=\"+\";break;case -1:c=\"-\";break;case 0:c=\" \"}a[b+1]=c+encodeURI(this.diffs[b][1])+\"\\n\"}return a.join(\"\").replace(/%20/g,\" \")};\nthis.diff_match_patch=diff_match_patch;this.DIFF_DELETE=-1;this.DIFF_INSERT=1;this.DIFF_EQUAL=0;\n\nexports.diff_match_patch = diff_match_patch;\n\n})()\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/modloader/diff_patch_match.js",
            "tags": "",
            "module-type": "library",
            "modified": "20180120213435879",
            "created": "20180120063923147"
        },
        "$:/plugins/ebalster/modloader/loader.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/loader.js\ntype: application/javascript\nmodule-type: startup\n\nA TiddlyWiki modloader that makes last-minute adjustments to shadow tiddlers during the startup process.  Use this at risk of __INDESCRIBABLE PERIL__.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: true */\n\"use strict\";\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\n// Modloader log text.\nvar modLog = \"Mod loader has not run.\";\n\nvar modNotices = \"\";\n\n\n// Export name and synchronous status\nexports.name = \"eb-modloader\";\nexports.before = [\"load-modules\"];\nexports.after = [];\nexports.synchronous = true;\n\n/*\n\tCheck if a module has been loaded (that is, executed).\n\t\tIt's unsafe to patch modules whose code has already run.\n*/\nfunction isTiddlerLoadedModule(tiddler, title) {\n\n\tvar module = $tw.modules.titles[title];\n\n\t/*var moduleType = tiddler.fields[\"module-type\"];\n\tif (!moduleType) return false;\n\tvar typeGroup = $tw.modules.types[moduleType];\n\tif (!typeGroup) return false;\n\tvar module = typeGroup[title || tiddler.fields.title];*/\n\n\tif (!module) return false;\n\n\t// If there are exports, it has been loaded.\n\treturn Boolean(module.exports);\n}\n\nfunction generatePatchedFields(tiddler, title, patchList) {\n\t// Log\n\tmodLog += \"\\n* [[\" + tiddler.fields.title + \"]]\";\n\n\t// Check if the tiddler is a previously loaded module.\n\t//  Currently this is treated as a critical error.\n\tif (isTiddlerLoadedModule(tiddler, title)) {\n\t\tmodLog += \"\\n** ''ERROR, too late to patch.'' (see below)\";\n\t\treturn false;\n\t}\n\n\t// The text we'll be applying patches to.\n\tvar patchedText = tiddler.fields.text;\n\n\t// Find the actual source for the shadow.\n\tvar srcPlugin = $tw.wiki.getShadowSource(title);\n\t\n\t// Apply the patches one by one.\n\tfor (var i = 0; i < patchList.length; ++i) {\n\t\tvar patchTid = patchList[i];\n\t\tmodLog += \"\\n** Apply [[\" + patchTid.fields.title + \"]]\";\n\n\t\ttry {\n\t\t\t// Parse and appy the patch.\n\t\t\tvar patch = diff.patch_fromText(patchTid.fields.text || \"\");\n\t\t\tvar patchResult = diff.patch_apply(patch, patchedText);\n\n\t\t\t// Check for any patch conflicts\n\t\t\tfor (var j = 0; j < patchResult[1].length; ++j) {\n\t\t\t\tif (!patchResult[1])\n\t\t\t\t\tthrow \"Conflict in patch #\" + j + \"/\" + patchResult[1].length;\n\t\t\t}\n\n\t\t\t// Store\n\t\t\tpatchedText = patchResult[0];\n\t\t\tmodLog += \": \" + patchResult[1].length + \" changes\";\n\t\t}\n\t\tcatch (err) {\n\t\t\tmodNotices += \"* ''\" + String(err) +\n\t\t\t\t\"'' applying [[\" + patchTid.fields.title + \"]]\" +\n\t\t\t\t\" to [[\" + title + \"]]\\n\";\n\t\t\tmodLog += \"\\n*** ''\" + String(err) + \"''\";\n\t\t\treturn false;\n\t\t}\n\n\t\t// Display a warning if this patch expected a different source\n\t\tvar srcExpect = patchTid.fields['modloader-source'];\n\t\tif (srcExpect && srcPlugin != srcExpect) {\n\t\t\tmodNotices += \"* ''Warning:'' expected [[\" +\n\t\t\t\ttitle + \"]] to have source plugin [[\" +\n\t\t\t\tsrcExpect + \"]], instead is [[\" + srcPlugin + \"]].\\n\";\n\t\t\tmodLog += \"\\n*** ''WARNING: unexpected source'' [[\" + srcPlugin + \"]]\";\n\t\t}\n\t}\n\n\t// Possibly re-assign a module's definition\n\tvar module = $tw.modules.titles[title];\n\tif (module) module.definition = patchedText;\n\n\t// Return the patched fields.\n\treturn Object.assign({}, tiddler.fields, {text: patchedText});\n}\n\nexports.startup = function() {\n\t\n\tmodLog = \"Running Mod Loader...\\n\\n\";\n\n\t// Accumulate unpatchables\n\tvar unpatchables = [];\n\t$tw.utils.each($tw.modules.titles, function(module, title) {\n\t\tif (typeof module.definition === \"string\" && module.exports) unpatchables.push(title);\n\t});\n\t\n\tvar displayStatus = false;\n\n\tvar patchPlan = Object.create(null),\n\t\tpatchCount = 0, target, srcPlugin,\n\t\tabort = false;\n\n\t/*\n\t\tAccumulate patch tiddlers from the wiki.\n\t\t\tPatches are only applied if the \n\t*/\n\t$tw.wiki.eachTiddlerPlusShadows(function(patchTiddler,title) {\n\t\tif (patchTiddler.fields.type != 'text/x-patch') return;\n\t\ttarget = patchTiddler.fields['modloader-target'];\n\t\tif (target) {\n\t\t\tif (patchPlan[target]) patchPlan[target].push(tiddler);\n\t\t\telse patchPlan[target] = [patchTiddler];\n\t\t\t++patchCount;\n\t\t}\n\t});\n\n\t// Log\n\tif (patchCount) {\n\t\tmodLog += patchCount + \" patches found.  Applying:\\n\\n\";\n\t}\n\telse modLog += \"no patches found.\\n\\nPatches must define field modloader-target and set type to `text/x-patch`.\";\n\n\t// Compute a mod plugin that patches shadow tiddlers.\n\t//   Non-shadows are unaffected by the modloader.\n\tvar modTiddlers = {};\n\t$tw.wiki.eachShadow(function(tiddler,title) {\n\t\t// Any patches for this target?\n\t\tvar patches = patchPlan[title];\n\t\tif (abort || !patches) return;\n\n\t\t// Try to generate patched tiddler.\n\t\tvar patchedFields = generatePatchedFields(tiddler, title, patches);\n\n\t\tif (patchedFields) {\n\t\t\t// Store the unmodded tiddler as a backup.\n\t\t\tmodutil.modBackupTiddlers[title] = tiddler;\n\t\t\tpatchedFields[\"modloader-source\"] = tiddler.source;\n\t\t\tmodTiddlers[title] = patchedFields;\n\t\t}\n\t\telse {\n\t\t\tabort = true;\n\t\t}\n\t});\n\n\t// Generate warnings for non-existent targets.\n\tif (!abort) for (target in patchPlan) {\n\t\tif (modTiddlers[target] === undefined) {\n\t\t\tmodNotices += \"* ''Warning:'' can't apply [[\" +\n\t\t\t\tpatchPlan[target][0].fields.title + \"]] to non-existent target `\" +\n\t\t\t\ttarget + \"`, skipped\\n\";\n\t\t\tmodLog += \"\\n* `\" + target + \"`: ''WARNING: target not found!''\";\n\t\t\tdisplayStatus = true;\n\t\t}\n\t}\n\n\t// Possibly abort all mods.  We do this to avoid partial code changes.\n\tif (abort) {\n\t\tmodLog += \"\\n\\nPatch aborted completely due to errors.\";\n\t\tmodTiddlers = {};\n\t}\n\telse {\n\t\t// We could forcefully patch other startup modules, if support was needed.\n\t\t//   This would be done by discarding and re-executing the module.  A bit crass.\n\t\t//   $tw.modules.types[\"startup\"][modified-startup] = ...\n\t}\n\n\t// Display note about unpatchables\n\tif (unpatchables.length) {\n\t\tmodLog += \"\\n\\n''NOTE'': it's too late for the modloader to patch these modules:\\n\\n\";\n\t\t$tw.utils.each(unpatchables, function(title) {\n\t\t\tmodLog += \"* `\" + $tw.modules.titles[title].moduleType + \"` [[\" + title + \"]]\\n\";\n\t\t});\n\t\tmodLog += \"\\n\";\n\t}\n\n\t// Generate status report.\n\tmodTiddlers[modutil.PATH_MOD_STATUS] = {text: modLog};\n\n\t// Possibly generate an alert popup with the modloader log.\n\tif (abort || displayStatus)\n\t{\n\t\tmodutil.showModLoaderAlert({\n\t\t\theader: (abort ? \"Mod Loader Failed!\" : \"Mod Loader Warning!\"),\n\t\t\tnotices: modNotices,\n\t\t});\n\t}\n\n\t// Bake the info tiddlers into a plugin\n\tvar modloaderPlugin = {\n\t\ttitle: modutil.PATH_MOD_PLUGIN,\n\t\ttype: \"application/json\",\n\t\t\"plugin-type\": \"modloader\",\n\t\t\"plugin-priority\": 100,\n\t\ttext: JSON.stringify({tiddlers: modTiddlers},null,1)\n\t};\n\t$tw.wiki.addTiddler(new $tw.Tiddler(modloaderPlugin));\n\t$tw.wiki.readPluginInfo();\n\t$tw.wiki.registerPluginTiddlers(\"modloader\");\n\t$tw.wiki.unpackPluginTiddlers();\n};\n\n})();",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/modloader/loader.js",
            "tags": "",
            "module-type": "startup",
            "modified": "20180120213407648",
            "created": "20180120055013558"
        },
        "$:/plugins/ebalster/modloader/parsers/patch.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/parsers/patch.js\ntype: application/javascript\nmodule-type: parser\n\nRender tiddlers of type \"text/x-patch\" like other plaintext tiddlers.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\nvar TextParser = function(type,text,options) {\n\n\tvar patches = diff.patch_fromText(text || \"\");\n\n\t//var src = \n\n\t//var diff = diff.diff_main()\n\n\t// Render the patch's insertions, deletions and preservations...\n\tvar html = [];\n\tfor (var i = 0; i < patches.length; i++) {\n\n\t\t// Render patch location note\n\t\tvar patch = patches[i];\n\t\thtml.push({\n\t\t\ttype:\"element\",\n\t\t\ttag: \"h3\",\n\t\t\tchildren: [{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"@@ -\" + (patch.start1+1) + \",\" + patch.length1 +\n\t\t\t\t\t\" +\" + (patch.start2+1) + \",\" + patch.length2 + \" @@\"\n\t\t\t}]\n\t\t});\n\t\thtml.push({type:\"element\", tag: \"hr\"});\n\n\t\t// Render the diffs\n\t\tfor (var j = 0; j < patch.diffs.length; ++j) {\n\t\t\tvar curdiff = patch.diffs[j];\n\t\t\t\tvar tag = \"span\";\n\t\t\tswitch (curdiff[0]) {\n\t\t\t\tcase +1: tag = \"ins\";  break;\n\t\t\t\tcase -1: tag = \"del\";  break;\n\t\t\t\tcase  0: tag = \"span\"; break;\n\t\t\t}\n\t\t\thtml.push({\n\t\t\t\ttype:\"element\",\n\t\t\t\ttag: tag,\n\t\t\t\tchildren: [{type: \"text\", text: curdiff[1]}]\n\t\t\t});\n\t\t}\n\t\thtml.push({type:\"element\", tag: \"hr\"});\n\t}\n\n\t// DEBUG\n\t//var html = [{type:\"text\", text: text}]; //text: JSON.stringify(patch,null,' ')}];\n\n\tthis.tree = [{\n\t\ttype: \"element\", tag: \"pre\",\n\t\tattributes: {class: {type: \"string\", value: \"modloader-patch\"}},\n\t\tchildren: [{type: \"element\", tag: \"code\", children: html}]\n\t}];\n};\n\nexports[\"text/x-patch\"] = TextParser;\n\n})();\n\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/modloader/parsers/patch.js",
            "tags": "",
            "module-type": "parser",
            "modified": "20180121184714296",
            "created": "20180121184614270"
        },
        "$:/plugins/ebalster/modloader/patches/core/modules/startup.js": {
            "text": "@@ -500,32 +500,49 @@\n trumentation%22;%0A%0A\n+// MODLOADER FIX \n var widget = req\n@@ -608,32 +608,109 @@\n  = function() %7B%0A\n+%09var widget = require(%22$:/core/modules/widgets/widget.js%22); // MODLOADER FIX%0A\n %09var modules,n,m\n",
            "bag": "default",
            "revision": "0",
            "type": "text/x-patch",
            "title": "$:/plugins/ebalster/modloader/patches/core/modules/startup.js",
            "modloader-source": "$:/core",
            "modified": "20180123225344855",
            "created": "20180123225257337"
        },
        "$:/plugins/ebalster/modloader/patchmaker": {
            "text": "\\define test_hint(filter)\n<$list filter=\"$filter$\" emptyMessage=\"✘\">\n✔\n</$list>\n\\end\n\n\\define replace_hint(filter)\n<$list filter=\"$filter$\">\nWarning: This tiddler exists and will be replaced!\n</$list>\n\\end\n\nUse this utility to generate patches, or examine its source to learn about the `action-createpatch` widget.\n\nIf ''destination'' is not specified it will be set to ''source''.  The mod-maker always uses a shadow tiddler for ''source'' even if there is a real tiddler replacing it.  The ''destination'' will always be selected as a real tiddler.\n\n\n<$tiddler tiddler=\"$:/temp/modloader/modmaker\">\n\n<table>\n<tr>\n  <th>Source</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-source\"\n      placeholder=\"Title of shadow tiddler to be modded.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-source}is[shadow]]>>\n  </td>\n</tr>\n<tr>\n  <th>Source Plugin</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-source-plugin\"\n      placeholder=\"Title of plugin containing source. Defaults to auto.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-source-plugin}is[plugin]]>>\n  </td>\n</tr>\n<tr>\n  <th>Destination</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-destination\"\n      placeholder=\"Title of modified tiddler. Defaults to target.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-destination}is[tiddler]]>>\n  </td>\n</tr>\n<tr>\n  <th>Output</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-output\"\n      placeholder=\"Title of patch tiddler to create. (Replaces existing)\"\n      size=45/>\n      <br/>\n      <<replace_hint [title{!!patch-output}is[tiddler]]>>\n  <td>\n    <<test_hint [title{!!patch-output}minlength[1]]>>\n  </td>\n</tr>\n</table>\n\n<$button>Compute Patch\n<$action-createpatch\n   source={{!!patch-source}}\n   source-plugin={{!!patch-source-plugin}}\n   destination={{!!patch-destination}}\n   output={{!!patch-output}}\n   savetitle=\"!!patch-made\" />\n</$button>\n\n<$list filter=\"[{!!patch-made}is[tiddler]]\">\n<$link>Open your patch: {{!!title}}</$link>\n</$list>\n\n</$tiddler>",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/modloader/patchmaker",
            "tags": "",
            "modified": "20180123182625482",
            "created": "20180121081336699"
        },
        "$:/plugins/ebalster/modloader/status": {
            "text": "!Modloader Status Report\n\n<$transclude tiddler=\"$:/temp/mod-plugin/status\">\n\nNot found.\n\nIt appears the modloader did not run at startup.\n\n</$transclude>",
            "bag": "default",
            "revision": "0",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/ebalster/modloader/status",
            "tags": "",
            "modified": "20180121182859863",
            "created": "20180121175357975"
        },
        "$:/plugins/ebalster/modloader/stylesheet.css": {
            "text": ".modloader-patch span {\n  font-weight: bold;\n  color: #555555;\n}\n\n.modloader-patch ins {\n  text-decoration: none;\n  font-weight: bold;\n  color: #009900;\n  background: #EEFFEE;\n}\n\n.modloader-patch del {\n  text-decoration: strikethrough;\n  color: #DD0000;\n  background: #FFBBBB;\n}",
            "bag": "default",
            "revision": "0",
            "type": "text/css",
            "title": "$:/plugins/ebalster/modloader/stylesheet.css",
            "tags": "$:/tags/Stylesheet",
            "modified": "20180123183419373",
            "created": "20180123160859840"
        },
        "$:/plugins/ebalster/modloader/utils.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/utils.js\ntype: application/javascript\nmodule-type: library\n\nUtility functions and data storage for the modloader.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: true */\n\"use strict\";\n\n\nvar DiffLib = require(\"$:/plugins/ebalster/modloader/diff_patch_match.js\");\nexports.diff = new DiffLib.diff_match_patch();\n\n// Pretty liberal timeout\nexports.diff.Diff_Timeout = 10.0;\n\n// Plenty of context on patches\nexports.diff.Patch_Margin = 8;\n\n/*\n\tFind the shadow tiddler in the given plugin and return it.\n\t\tIf no pluginTitle is provided, attempt to guess it.\n\t\tResult (if non-null) is a new object {source: <plugin title>, fields: {<original fields>}} \n*/\nexports.findOriginalShadow = function findOriginalShadow(title, pluginTitle) {\n\t// Direct search if pluginTitle is specified.\n\tif (pluginTitle) {\n\t\tvar plugInfo = $tw.wiki.getPluginInfo(pluginTitle);\n\t\tif (plugInfo && plugInfo.tiddlers && plugInfo.tiddlers[title]) return {\n\t\t\tfields: plugInfo.tiddlers[title],\n\t\t\tsource: pluginTitle,\n\t\t};\n\t\treturn null;\n\t}\n\n\t// No pluginTitle: first try core (most likely mod target)\n\tvar found = findOriginalShadow(title, \"$:/core\");\n\tif (found) return found;\n\n\t// Then try all other tiddlers in the wiki.\n\t//   TODO would be nice to do this in load order somehow\n\t$tw.wiki.each(function(searchTiddler, searchTitle) {\n\t\t// Do NOT consider temp tiddlers, which are usually generated.\n\t\tif (searchTitle.substr(0,7) == \"$:/temp\") return;\n\t\tif (!found) found = findOriginalShadow(title, searchTitle);\n\t});\n\treturn found;\n};\n\nexports.modBackupTiddlers = {};\n\n\n// Alert display path\nexports.PATH_ALERT_TEMPLATE = \"$:/plugins/ebalster/modloader/alert\";\n\nexports.PATH_MOD_PLUGIN = \"$:/temp/mod-plugin\";\nexports.PATH_MOD_STATUS = \"$:/temp/mod-plugin/status\";\nexports.PATH_ALERT_PREFIX = \"$:/temp/mod-plugin/alert\";\n\nvar ALERT_COUNTER = 1;\n\n//var ALERT_PREFIX = \"$:/temp/\"\n\n\nexports.showModAlertEx = function(template, fields) {\n\tvar tiddler;\n\tvar affix = {\n\t\ttitle: exports.PATH_ALERT_PREFIX + \"/\" + exports.ALERT_COUNTER++,\n\t\ttags: \"[[$:/tags/Alert]]\",\n\t\tcomponent: \"Modloader Plugin\"\n\t};\n\tif (template) {\n\t\ttiddler = new $tw.Tiddler($tw.wiki.getTiddler(template), fields, affix);\n\t}\n\telse {\n\t\ttiddler = new $tw.Tiddler(fields, affix);\n\t}\n\t$tw.wiki.addTiddler(tiddler);\n};\n\nexports.showModLoaderAlert = function(fields) {\n\texports.showModAlertEx(exports.PATH_ALERT_TEMPLATE, fields);\n};\n\nexports.showGenericAlert = function(text) {\n\texports.showModAlertEx(null, {text: text});\n};\n\n\n})();",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/modloader/utils.js",
            "tags": "",
            "module-type": "library",
            "modified": "20180121075641943",
            "created": "20180121075602920"
        },
        "$:/plugins/ebalster/modloader/widgets/action-createpatch.js": {
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/widgets/action-createpatch.js\ntype: application/javascript\nmodule-type: widget\n\nAction widget to create a patch tiddler for use with the modloader.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\n\nvar CreatePatchWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nCreatePatchWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nCreatePatchWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nCreatePatchWidget.prototype.execute = function() {\n\tthis.patchSource = this.getAttribute(\"source\");\n\tthis.patchSourcePlugin = this.getAttribute(\"source-plugin\");\n\tthis.patchDestination = this.getAttribute(\"destination\") || this.patchSource;\n\tthis.patchOutput = this.getAttribute(\"output\");\n\tthis.actionSaveTitle = this.getAttribute(\"savetitle\");\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nCreatePatchWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif($tw.utils.count(changedAttributes) > 0) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nvar ALERT_PREFIX = \"!!Patch creation failed...\\n\\n\";\n\nCreatePatchWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tvar self=this;\n\tvar outTitle = this.patchOutput || this.wiki.generateNewTitle(\"ModloaderPatch\");\n\n\tif (!this.patchSource) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"action-createpatch requires a `source` to be set.\");\n\t\treturn true;\n\t}\n\n\t// Grab the source tiddler (which must exist as a shadow).\n\t//   Source plugin will be guessed if not provided.\n\tvar sourceTiddler = modutil.findOriginalShadow(\n\t\tthis.patchSource,\n\t\tthis.patchSourcePlugin);\n\tif (!sourceTiddler) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch source `\" + this.patchSource + \"` not found in \" +\n\t\t\t(this.patchSourcePlugin ? \"source-plugin `\" + this.patchSourcePlugin + \"`\" : \"any plugin.\"));\n\t\treturn true;\n\t}\n\n\t// Grab the destination tiddler (which must exist as a non-shadow or overriding shadow.)\n\tif (!$tw.wiki.tiddlerExists(this.patchDestination) &&\n\t\t$tw.wiki.getShadowSource(this.patchDestination) == sourceTiddler.source) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch destination `\" + this.patchDestination + \"` refers to the target.\");\n\t\treturn true;\n\t}\n\tvar destTiddler = $tw.wiki.getTiddler(this.patchDestination);\n\tif (!destTiddler)  {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch destination `\" + this.patchDestination + \"` doesn't exist.\");\n\t\treturn true;\n\t}\n\n\t// Generate a diff and clean it up.\n\tvar delta = diff.diff_main(sourceTiddler.fields.text || \"\", destTiddler.fields.text || \"\", false);\n\tdiff.diff_cleanupSemantic(delta);\n\n\t// Generate the patch.\n\tvar patch = diff.patch_make(sourceTiddler.fields.text || \"\", delta);\n\tpatch = diff.patch_toText(patch);\n\n\t//var patch = diff.patch_make(sourceTiddler.fields.text, destTiddler.fields.text); // DBG\n\n\t// Generate fields for the patch tiddler.\n\tvar fields = {\n\t\ttext: patch,\n\t\ttype: \"text/x-patch\",\n\t\t\"modloader-target\": String(this.patchSource),\n\t\t\"modloader-source\": String(sourceTiddler.source),\n\t};\n\n\t// Add the generated patch tiddler to the wiki.\n\tvar tiddler = this.wiki.addTiddler(new $tw.Tiddler(\n\t\tthis.wiki.getCreationFields(),\n\t\tfields,\n\t\tthis.wiki.getModificationFields(),\n\t\t{title: outTitle}));\n\n\t// Set the title reference, possibly.\n\tif(this.actionSaveTitle) {\n\t\tthis.wiki.setTextReference(this.actionSaveTitle,outTitle,this.getVariable(\"currentTiddler\"));\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-createpatch\"] = CreatePatchWidget;\n\n})();\n",
            "bag": "default",
            "revision": "0",
            "type": "application/javascript",
            "title": "$:/plugins/ebalster/modloader/widgets/action-createpatch.js",
            "tags": "",
            "module-type": "widget",
            "modified": "20180121073352243",
            "created": "20180121073220273"
        }
    }
}