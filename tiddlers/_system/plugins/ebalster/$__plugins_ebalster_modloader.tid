core-version: >=5.1.20
created: NaNNaNNaNNaNNaNNaNNaN
dependents: 
list: about patchmaker status
modified: NaNNaNNaNNaNNaNNaNNaN
plugin-priority: 1
plugin-type: plugin
revision: 0
title: $:/plugins/ebalster/modloader
type: application/json
version: 0.0.4

{
    "tiddlers": {
        "$:/core/modules/startup.js": {
            "title": "$:/core/modules/startup.js",
            "created": "20180123222302495",
            "modified": "20190301000537293",
            "module-type": "startup",
            "revision": "0",
            "tags": "",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/core/modules/startup.js\ntype: application/javascript\nmodule-type: startup\n\nMiscellaneous startup logic for both the client and server.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"startup\";\nexports.after = [\"load-modules\"];\nexports.synchronous = true;\n\n// Set to `true` to enable performance instrumentation\nvar PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE = \"$:/config/Performance/Instrumentation\";\n\n// MODLOADER FIX var widget = require(\"$:/core/modules/widgets/widget.js\");\n\nexports.startup = function() {\n\tvar widget = require(\"$:/core/modules/widgets/widget.js\"); // MODLOADER FIX\n\tvar modules,n,m,f;\n\t// Minimal browser detection\n\tif($tw.browser) {\n\t\t$tw.browser.isIE = (/msie|trident/i.test(navigator.userAgent));\n\t\t$tw.browser.isFirefox = !!document.mozFullScreenEnabled;\n\t}\n\t// Platform detection\n\t$tw.platform = {};\n\tif($tw.browser) {\n\t\t$tw.platform.isMac = /Mac/.test(navigator.platform);\n\t\t$tw.platform.isWindows = /win/i.test(navigator.platform);\n\t\t$tw.platform.isLinux = /Linux/i.test(navigator.appVersion);\n\t} else {\n\t\tswitch(require(\"os\").platform()) {\n\t\t\tcase \"darwin\":\n\t\t\t\t$tw.platform.isMac = true;\n\t\t\t\tbreak;\n\t\t\tcase \"win32\":\n\t\t\t\t$tw.platform.isWindows = true;\n\t\t\t\tbreak;\n\t\t\tcase \"freebsd\":\n\t\t\t\t$tw.platform.isLinux = true;\n\t\t\t\tbreak;\n\t\t\tcase \"linux\":\n\t\t\t\t$tw.platform.isLinux = true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t// Initialise version\n\t$tw.version = $tw.utils.extractVersionInfo();\n\t// Set up the performance framework\n\t$tw.perf = new $tw.Performance($tw.wiki.getTiddlerText(PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE,\"no\") === \"yes\");\n\t// Kick off the language manager and switcher\n\t$tw.language = new $tw.Language();\n\t$tw.languageSwitcher = new $tw.PluginSwitcher({\n\t\twiki: $tw.wiki,\n\t\tpluginType: \"language\",\n\t\tcontrollerTitle: \"$:/language\",\n\t\tdefaultPlugins: [\n\t\t\t\"$:/languages/en-US\"\n\t\t],\n\t\tonSwitch: function(plugins) {\n\t\t\tif($tw.browser) {\n\t\t\t\tvar pluginTiddler = $tw.wiki.getTiddler(plugins[0]);\n\t\t\t\tif(pluginTiddler) {\n\t\t\t\t\tdocument.documentElement.setAttribute(\"dir\",pluginTiddler.getFieldString(\"text-direction\") || \"auto\");\n\t\t\t\t} else {\n\t\t\t\t\tdocument.documentElement.removeAttribute(\"dir\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\t// Kick off the theme manager\n\t$tw.themeManager = new $tw.PluginSwitcher({\n\t\twiki: $tw.wiki,\n\t\tpluginType: \"theme\",\n\t\tcontrollerTitle: \"$:/theme\",\n\t\tdefaultPlugins: [\n\t\t\t\"$:/themes/tiddlywiki/snowwhite\",\n\t\t\t\"$:/themes/tiddlywiki/vanilla\"\n\t\t]\n\t});\n\t// Kick off the keyboard manager\n\t$tw.keyboardManager = new $tw.KeyboardManager();\n\t// Clear outstanding tiddler store change events to avoid an unnecessary refresh cycle at startup\n\t$tw.wiki.clearTiddlerEventQueue();\n\t// Create a root widget for attaching event handlers. By using it as the parentWidget for another widget tree, one can reuse the event handlers\n\tif($tw.browser) {\n\t\t$tw.rootWidget = new widget.widget({\n\t\t\ttype: \"widget\",\n\t\t\tchildren: []\n\t\t},{\n\t\t\twiki: $tw.wiki,\n\t\t\tdocument: document\n\t\t});\n\t}\n\t// Find a working syncadaptor\n\t$tw.syncadaptor = undefined;\n\t$tw.modules.forEachModuleOfType(\"syncadaptor\",function(title,module) {\n\t\tif(!$tw.syncadaptor && module.adaptorClass) {\n\t\t\t$tw.syncadaptor = new module.adaptorClass({wiki: $tw.wiki});\n\t\t}\n\t});\n\t// Set up the syncer object if we've got a syncadaptor\n\tif($tw.syncadaptor) {\n\t\t$tw.syncer = new $tw.Syncer({wiki: $tw.wiki, syncadaptor: $tw.syncadaptor});\n\t} \n\t// Setup the saver handler\n\t$tw.saverHandler = new $tw.SaverHandler({wiki: $tw.wiki, dirtyTracking: !$tw.syncadaptor});\n\t// Host-specific startup\n\tif($tw.browser) {\n\t\t// Install the popup manager\n\t\t$tw.popup = new $tw.utils.Popup();\n\t\t// Install the animator\n\t\t$tw.anim = new $tw.utils.Animator();\n\t}\n};\n\n})();\n"
        },
        "$:/plugins/ebalster/modloader/about": {
            "title": "$:/plugins/ebalster/modloader/about",
            "created": "20180120061330117",
            "modified": "20190301000537293",
            "revision": "0",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "The ''Mod-Loader Plugin'' is a powerful meta-plugin for TiddlyWiki which facilitates plugins including the TiddlyWiki core to be modified at load-time.  This allows for the creation of plugins that modify the TiddlyWiki core but can maintain compatibility with newer versions of the core.\n\nMods can only affect shadow tiddlers.  `startup` modules cannot be meaningfully patched at this time.\n\n\n!!Installing Mods\n\nInstalling mods is simple.  Simply install the modloader plugin and any mod plugins.  Alternatively, patch tiddlers may be installed directly into your wiki.\n\n<<<\nTo install the modloader plugin, drag-and-drop this to your wiki:\n\n{{$:/plugins/ebalster/modloader||$:/core/ui/Components/plugin-info}}\n<<<\n\n\n!!Limitations and Conflicts\n\nIt may not be able to apply a patch due to conflicts with another patch or changes in the specific part of a file a patch is meant to modify.  Currently, if //any// patch fails to apply, the modloader will abort completely and a warning will be displayed on startup.  This avoids a situation where only certain changes are applied and the resulting code is non-functional.\n\nFuture versions of the modloader may introduce a concept of patch \"groups\", where only those changes in a given group will be aborted upon failure or conflict.\n\nThe modloader can patch the TiddlyWiki core, as well as other plugins, in principle.  However, it //cannot// currently patch plugins that do not define any `plugin-priority`.  In the future we may investigate lifting this limitation.\n\n\n!!Creating Mods\n\nA mod is a collection of Patch Tiddlers (see below) which is usually packaged as a plugin.  To generate a mod, use the [[Mod Maker Utility|$:/plugins/ebalster/modloader/modmaker]].\n\n\n!!Patch Tiddlers\n\nA patch tiddler is a tiddler with its `modloader-target` field set to the title of a shadow tiddler which it modifies.\n\n\n!!Technical Explanation\n\nThe modloader patch runs before TiddlyWiki's startup modules, finds all tiddlers with a defined `modloader-target` field whose type is `text/x-patch` and applies the changes to the corresponding targets' text.  The changed tiddlers are packaged into a new plugin `$:/temp/modloader-plugin` which is immediately added to the wiki.\n\nPatches are applied only to shadow tiddlers, and the tiddlers produced by the modloader are also shadows.  Thus, it is not possible for the modloader to affect non-shadow tiddlers in the wiki.\n\n\nDevelopment notes:\n\n* Can we force other startup modules to be re-eval'd?"
        },
        "$:/plugins/ebalster/modloader/alert": {
            "title": "$:/plugins/ebalster/modloader/alert",
            "created": "20180120194658741",
            "header": "Mod Loader alert!",
            "modified": "20190301000537293",
            "revision": "0",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "!!{{!!header}}\n\n{{!!notices}}\n\n[[See Mod Loader Log|$:/temp/mod-plugin/status]]."
        },
        "$:/plugins/ebalster/modloader/diff_patch_match.js": {
            "title": "$:/plugins/ebalster/modloader/diff_patch_match.js",
            "text": "// created: 20180120063923147\n// modified: 20190301000537293\n// module - type: library\n// revision: 0\n// tags:\n// title: $: /plugins/ebalster / modloader / diff_patch_match.js\n// type: application / javascript\n\n(function () {\n    function diff_match_patch() {\n        this.Diff_Timeout = 1;\n        this.Diff_EditCost = 4;\n        this.Match_Threshold = 0.5;\n        this.Match_Distance = 1E3;\n        this.Patch_DeleteThreshold = 0.5;\n        this.Patch_Margin = 4;\n        this.Match_MaxBits = 32\n    }\n    diff_match_patch.prototype.diff_main = function (a, b, c, d) {\n        \"undefined\" == typeof d && (d = 0 >= this.Diff_Timeout ? Number.MAX_VALUE : (new Date).getTime() + 1E3 * this.Diff_Timeout);\n        if (null == a || null == b) throw Error(\"Null input. (diff_main)\");\n        if (a == b) return a ? [\n            [0, a]\n        ] : [];\n        \"undefined\" == typeof c && (c = !0);\n        var e = c,\n            f = this.diff_commonPrefix(a, b);\n        c = a.substring(0, f);\n        a = a.substring(f);\n        b = b.substring(f);\n        var f = this.diff_commonSuffix(a, b),\n            g = a.substring(a.length - f);\n        a = a.substring(0, a.length - f);\n        b = b.substring(0, b.length - f);\n        a = this.diff_compute_(a,\n            b, e, d);\n        c && a.unshift([0, c]);\n        g && a.push([0, g]);\n        this.diff_cleanupMerge(a);\n        return a\n    };\n    diff_match_patch.prototype.diff_compute_ = function (a, b, c, d) {\n        if (!a) return [\n            [1, b]\n        ];\n        if (!b) return [\n            [-1, a]\n        ];\n        var e = a.length > b.length ? a : b,\n            f = a.length > b.length ? b : a,\n            g = e.indexOf(f);\n        return -1 != g ? (c = [\n            [1, e.substring(0, g)],\n            [0, f],\n            [1, e.substring(g + f.length)]\n        ], a.length > b.length && (c[0][0] = c[2][0] = -1), c) : 1 == f.length ? [\n            [-1, a],\n            [1, b]\n        ] : (e = this.diff_halfMatch_(a, b)) ? (f = e[0], a = e[1], g = e[2], b = e[3], e = e[4], f = this.diff_main(f, g, c, d), c = this.diff_main(a, b, c, d), f.concat([\n            [0, e]\n        ], c)) : c && 100 < a.length && 100 < b.length ? this.diff_lineMode_(a, b,\n            d) : this.diff_bisect_(a, b, d)\n    };\n    diff_match_patch.prototype.diff_lineMode_ = function (a, b, c) {\n        var d = this.diff_linesToChars_(a, b);\n        a = d.chars1;\n        b = d.chars2;\n        d = d.lineArray;\n        a = this.diff_main(a, b, !1, c);\n        this.diff_charsToLines_(a, d);\n        this.diff_cleanupSemantic(a);\n        a.push([0, \"\"]);\n        for (var e = d = b = 0, f = \"\", g = \"\"; b < a.length;) {\n            switch (a[b][0]) {\n                case 1:\n                    e++;\n                    g += a[b][1];\n                    break;\n                case -1:\n                    d++;\n                    f += a[b][1];\n                    break;\n                case 0:\n                    if (1 <= d && 1 <= e) {\n                        a.splice(b - d - e, d + e);\n                        b = b - d - e;\n                        d = this.diff_main(f, g, !1, c);\n                        for (e = d.length - 1; 0 <= e; e--) a.splice(b, 0, d[e]);\n                        b += d.length\n                    }\n                    d = e = 0;\n                    g = f = \"\"\n            }\n            b++\n        }\n        a.pop();\n        return a\n    };\n    diff_match_patch.prototype.diff_bisect_ = function (a, b, c) {\n        for (var d = a.length, e = b.length, f = Math.ceil((d + e) / 2), g = f, h = 2 * f, j = Array(h), i = Array(h), k = 0; k < h; k++) j[k] = -1, i[k] = -1;\n        j[g + 1] = 0;\n        i[g + 1] = 0;\n        for (var k = d - e, q = 0 != k % 2, r = 0, t = 0, p = 0, w = 0, v = 0; v < f && !((new Date).getTime() > c); v++) {\n            for (var n = -v + r; n <= v - t; n += 2) {\n                var l = g + n,\n                    m;\n                m = n == -v || n != v && j[l - 1] < j[l + 1] ? j[l + 1] : j[l - 1] + 1;\n                for (var s = m - n; m < d && s < e && a.charAt(m) == b.charAt(s);) m++, s++;\n                j[l] = m;\n                if (m > d) t += 2;\n                else if (s > e) r += 2;\n                else if (q && (l = g + k - n, 0 <= l && l < h && -1 != i[l])) {\n                    var u = d - i[l];\n                    if (m >=\n                        u) return this.diff_bisectSplit_(a, b, m, s, c)\n                }\n            }\n            for (n = -v + p; n <= v - w; n += 2) {\n                l = g + n;\n                u = n == -v || n != v && i[l - 1] < i[l + 1] ? i[l + 1] : i[l - 1] + 1;\n                for (m = u - n; u < d && m < e && a.charAt(d - u - 1) == b.charAt(e - m - 1);) u++, m++;\n                i[l] = u;\n                if (u > d) w += 2;\n                else if (m > e) p += 2;\n                else if (!q && (l = g + k - n, 0 <= l && (l < h && -1 != j[l]) && (m = j[l], s = g + m - l, u = d - u, m >= u))) return this.diff_bisectSplit_(a, b, m, s, c)\n            }\n        }\n        return [\n            [-1, a],\n            [1, b]\n        ]\n    };\n    diff_match_patch.prototype.diff_bisectSplit_ = function (a, b, c, d, e) {\n        var f = a.substring(0, c),\n            g = b.substring(0, d);\n        a = a.substring(c);\n        b = b.substring(d);\n        f = this.diff_main(f, g, !1, e);\n        e = this.diff_main(a, b, !1, e);\n        return f.concat(e)\n    };\n    diff_match_patch.prototype.diff_linesToChars_ = function (a, b) {\n        function c(a) {\n            for (var b = \"\", c = 0, f = -1, g = d.length; f < a.length - 1;) {\n                f = a.indexOf(\"\\n\", c); - 1 == f && (f = a.length - 1);\n                var r = a.substring(c, f + 1),\n                    c = f + 1;\n                (e.hasOwnProperty ? e.hasOwnProperty(r) : void 0 !== e[r]) ? b += String.fromCharCode(e[r]): (b += String.fromCharCode(g), e[r] = g, d[g++] = r)\n            }\n            return b\n        }\n        var d = [],\n            e = {};\n        d[0] = \"\";\n        var f = c(a),\n            g = c(b);\n        return {\n            chars1: f,\n            chars2: g,\n            lineArray: d\n        }\n    };\n    diff_match_patch.prototype.diff_charsToLines_ = function (a, b) {\n        for (var c = 0; c < a.length; c++) {\n            for (var d = a[c][1], e = [], f = 0; f < d.length; f++) e[f] = b[d.charCodeAt(f)];\n            a[c][1] = e.join(\"\")\n        }\n    };\n    diff_match_patch.prototype.diff_commonPrefix = function (a, b) {\n        if (!a || !b || a.charAt(0) != b.charAt(0)) return 0;\n        for (var c = 0, d = Math.min(a.length, b.length), e = d, f = 0; c < e;) a.substring(f, e) == b.substring(f, e) ? f = c = e : d = e, e = Math.floor((d - c) / 2 + c);\n        return e\n    };\n    diff_match_patch.prototype.diff_commonSuffix = function (a, b) {\n        if (!a || !b || a.charAt(a.length - 1) != b.charAt(b.length - 1)) return 0;\n        for (var c = 0, d = Math.min(a.length, b.length), e = d, f = 0; c < e;) a.substring(a.length - e, a.length - f) == b.substring(b.length - e, b.length - f) ? f = c = e : d = e, e = Math.floor((d - c) / 2 + c);\n        return e\n    };\n    diff_match_patch.prototype.diff_commonOverlap_ = function (a, b) {\n        var c = a.length,\n            d = b.length;\n        if (0 == c || 0 == d) return 0;\n        c > d ? a = a.substring(c - d) : c < d && (b = b.substring(0, c));\n        c = Math.min(c, d);\n        if (a == b) return c;\n        for (var d = 0, e = 1;;) {\n            var f = a.substring(c - e),\n                f = b.indexOf(f);\n            if (-1 == f) return d;\n            e += f;\n            if (0 == f || a.substring(c - e) == b.substring(0, e)) d = e, e++\n        }\n    };\n    diff_match_patch.prototype.diff_halfMatch_ = function (a, b) {\n        function c(a, b, c) {\n            for (var d = a.substring(c, c + Math.floor(a.length / 4)), e = -1, g = \"\", h, j, n, l; - 1 != (e = b.indexOf(d, e + 1));) {\n                var m = f.diff_commonPrefix(a.substring(c), b.substring(e)),\n                    s = f.diff_commonSuffix(a.substring(0, c), b.substring(0, e));\n                g.length < s + m && (g = b.substring(e - s, e) + b.substring(e, e + m), h = a.substring(0, c - s), j = a.substring(c + m), n = b.substring(0, e - s), l = b.substring(e + m))\n            }\n            return 2 * g.length >= a.length ? [h, j, n, l, g] : null\n        }\n        if (0 >= this.Diff_Timeout) return null;\n        var d = a.length > b.length ? a : b,\n            e = a.length > b.length ? b : a;\n        if (4 > d.length || 2 * e.length < d.length) return null;\n        var f = this,\n            g = c(d, e, Math.ceil(d.length / 4)),\n            d = c(d, e, Math.ceil(d.length / 2)),\n            h;\n        if (!g && !d) return null;\n        h = d ? g ? g[4].length > d[4].length ? g : d : d : g;\n        var j;\n        a.length > b.length ? (g = h[0], d = h[1], e = h[2], j = h[3]) : (e = h[0], j = h[1], g = h[2], d = h[3]);\n        h = h[4];\n        return [g, d, e, j, h]\n    };\n    diff_match_patch.prototype.diff_cleanupSemantic = function (a) {\n        for (var b = !1, c = [], d = 0, e = null, f = 0, g = 0, h = 0, j = 0, i = 0; f < a.length;) 0 == a[f][0] ? (c[d++] = f, g = j, h = i, i = j = 0, e = a[f][1]) : (1 == a[f][0] ? j += a[f][1].length : i += a[f][1].length, e && (e.length <= Math.max(g, h) && e.length <= Math.max(j, i)) && (a.splice(c[d - 1], 0, [-1, e]), a[c[d - 1] + 1][0] = 1, d--, d--, f = 0 < d ? c[d - 1] : -1, i = j = h = g = 0, e = null, b = !0)), f++;\n        b && this.diff_cleanupMerge(a);\n        this.diff_cleanupSemanticLossless(a);\n        for (f = 1; f < a.length;) {\n            if (-1 == a[f - 1][0] && 1 == a[f][0]) {\n                b = a[f - 1][1];\n                c = a[f][1];\n                d = this.diff_commonOverlap_(b, c);\n                e = this.diff_commonOverlap_(c, b);\n                if (d >= e) {\n                    if (d >= b.length / 2 || d >= c.length / 2) a.splice(f, 0, [0, c.substring(0, d)]), a[f - 1][1] = b.substring(0, b.length - d), a[f + 1][1] = c.substring(d), f++\n                } else if (e >= b.length / 2 || e >= c.length / 2) a.splice(f, 0, [0, b.substring(0, e)]), a[f - 1][0] = 1, a[f - 1][1] = c.substring(0, c.length - e), a[f + 1][0] = -1, a[f + 1][1] = b.substring(e), f++;\n                f++\n            }\n            f++\n        }\n    };\n    diff_match_patch.prototype.diff_cleanupSemanticLossless = function (a) {\n        function b(a, b) {\n            if (!a || !b) return 6;\n            var c = a.charAt(a.length - 1),\n                d = b.charAt(0),\n                e = c.match(diff_match_patch.nonAlphaNumericRegex_),\n                f = d.match(diff_match_patch.nonAlphaNumericRegex_),\n                g = e && c.match(diff_match_patch.whitespaceRegex_),\n                h = f && d.match(diff_match_patch.whitespaceRegex_),\n                c = g && c.match(diff_match_patch.linebreakRegex_),\n                d = h && d.match(diff_match_patch.linebreakRegex_),\n                i = c && a.match(diff_match_patch.blanklineEndRegex_),\n                j = d && b.match(diff_match_patch.blanklineStartRegex_);\n            return i || j ? 5 : c || d ? 4 : e && !g && h ? 3 : g || h ? 2 : e || f ? 1 : 0\n        }\n        for (var c = 1; c < a.length - 1;) {\n            if (0 == a[c - 1][0] && 0 == a[c + 1][0]) {\n                var d = a[c - 1][1],\n                    e = a[c][1],\n                    f = a[c + 1][1],\n                    g = this.diff_commonSuffix(d, e);\n                if (g) var h = e.substring(e.length - g),\n                    d = d.substring(0, d.length - g),\n                    e = h + e.substring(0, e.length - g),\n                    f = h + f;\n                for (var g = d, h = e, j = f, i = b(d, e) + b(e, f); e.charAt(0) === f.charAt(0);) {\n                    var d = d + e.charAt(0),\n                        e = e.substring(1) + f.charAt(0),\n                        f = f.substring(1),\n                        k = b(d, e) + b(e, f);\n                    k >= i && (i = k, g = d, h = e, j = f)\n                }\n                a[c - 1][1] != g && (g ? a[c - 1][1] = g : (a.splice(c - 1, 1), c--), a[c][1] =\n                    h, j ? a[c + 1][1] = j : (a.splice(c + 1, 1), c--))\n            }\n            c++\n        }\n    };\n    diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\n    diff_match_patch.whitespaceRegex_ = /\\s/;\n    diff_match_patch.linebreakRegex_ = /[\\r\\n]/;\n    diff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\n    diff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n    diff_match_patch.prototype.diff_cleanupEfficiency = function (a) {\n        for (var b = !1, c = [], d = 0, e = null, f = 0, g = !1, h = !1, j = !1, i = !1; f < a.length;) {\n            if (0 == a[f][0]) a[f][1].length < this.Diff_EditCost && (j || i) ? (c[d++] = f, g = j, h = i, e = a[f][1]) : (d = 0, e = null), j = i = !1;\n            else if (-1 == a[f][0] ? i = !0 : j = !0, e && (g && h && j && i || e.length < this.Diff_EditCost / 2 && 3 == g + h + j + i)) a.splice(c[d - 1], 0, [-1, e]), a[c[d - 1] + 1][0] = 1, d--, e = null, g && h ? (j = i = !0, d = 0) : (d--, f = 0 < d ? c[d - 1] : -1, j = i = !1), b = !0;\n            f++\n        }\n        b && this.diff_cleanupMerge(a)\n    };\n    diff_match_patch.prototype.diff_cleanupMerge = function (a) {\n        a.push([0, \"\"]);\n        for (var b = 0, c = 0, d = 0, e = \"\", f = \"\", g; b < a.length;) switch (a[b][0]) {\n            case 1:\n                d++;\n                f += a[b][1];\n                b++;\n                break;\n            case -1:\n                c++;\n                e += a[b][1];\n                b++;\n                break;\n            case 0:\n                1 < c + d ? (0 !== c && 0 !== d && (g = this.diff_commonPrefix(f, e), 0 !== g && (0 < b - c - d && 0 == a[b - c - d - 1][0] ? a[b - c - d - 1][1] += f.substring(0, g) : (a.splice(0, 0, [0, f.substring(0, g)]), b++), f = f.substring(g), e = e.substring(g)), g = this.diff_commonSuffix(f, e), 0 !== g && (a[b][1] = f.substring(f.length - g) + a[b][1], f = f.substring(0, f.length -\n                    g), e = e.substring(0, e.length - g))), 0 === c ? a.splice(b - d, c + d, [1, f]) : 0 === d ? a.splice(b - c, c + d, [-1, e]) : a.splice(b - c - d, c + d, [-1, e], [1, f]), b = b - c - d + (c ? 1 : 0) + (d ? 1 : 0) + 1) : 0 !== b && 0 == a[b - 1][0] ? (a[b - 1][1] += a[b][1], a.splice(b, 1)) : b++, c = d = 0, f = e = \"\"\n        }\n        \"\" === a[a.length - 1][1] && a.pop();\n        c = !1;\n        for (b = 1; b < a.length - 1;) 0 == a[b - 1][0] && 0 == a[b + 1][0] && (a[b][1].substring(a[b][1].length - a[b - 1][1].length) == a[b - 1][1] ? (a[b][1] = a[b - 1][1] + a[b][1].substring(0, a[b][1].length - a[b - 1][1].length), a[b + 1][1] = a[b - 1][1] + a[b + 1][1], a.splice(b - 1, 1), c = !0) : a[b][1].substring(0,\n            a[b + 1][1].length) == a[b + 1][1] && (a[b - 1][1] += a[b + 1][1], a[b][1] = a[b][1].substring(a[b + 1][1].length) + a[b + 1][1], a.splice(b + 1, 1), c = !0)), b++;\n        c && this.diff_cleanupMerge(a)\n    };\n    diff_match_patch.prototype.diff_xIndex = function (a, b) {\n        var c = 0,\n            d = 0,\n            e = 0,\n            f = 0,\n            g;\n        for (g = 0; g < a.length; g++) {\n            1 !== a[g][0] && (c += a[g][1].length); - 1 !== a[g][0] && (d += a[g][1].length);\n            if (c > b) break;\n            e = c;\n            f = d\n        }\n        return a.length != g && -1 === a[g][0] ? f : f + (b - e)\n    };\n    diff_match_patch.prototype.diff_prettyHtml = function (a) {\n        for (var b = [], c = /&/g, d = /</g, e = />/g, f = /\\n/g, g = 0; g < a.length; g++) {\n            var h = a[g][0],\n                j = a[g][1],\n                j = j.replace(c, \"&amp;\").replace(d, \"&lt;\").replace(e, \"&gt;\").replace(f, \"&para;<br>\");\n            switch (h) {\n                case 1:\n                    b[g] = '<ins style=\"background:#e6ffe6;\">' + j + \"</ins>\";\n                    break;\n                case -1:\n                    b[g] = '<del style=\"background:#ffe6e6;\">' + j + \"</del>\";\n                    break;\n                case 0:\n                    b[g] = \"<span>\" + j + \"</span>\"\n            }\n        }\n        return b.join(\"\")\n    };\n    diff_match_patch.prototype.diff_text1 = function (a) {\n        for (var b = [], c = 0; c < a.length; c++) 1 !== a[c][0] && (b[c] = a[c][1]);\n        return b.join(\"\")\n    };\n    diff_match_patch.prototype.diff_text2 = function (a) {\n        for (var b = [], c = 0; c < a.length; c++) - 1 !== a[c][0] && (b[c] = a[c][1]);\n        return b.join(\"\")\n    };\n    diff_match_patch.prototype.diff_levenshtein = function (a) {\n        for (var b = 0, c = 0, d = 0, e = 0; e < a.length; e++) {\n            var f = a[e][0],\n                g = a[e][1];\n            switch (f) {\n                case 1:\n                    c += g.length;\n                    break;\n                case -1:\n                    d += g.length;\n                    break;\n                case 0:\n                    b += Math.max(c, d), d = c = 0\n            }\n        }\n        return b += Math.max(c, d)\n    };\n    diff_match_patch.prototype.diff_toDelta = function (a) {\n        for (var b = [], c = 0; c < a.length; c++) switch (a[c][0]) {\n            case 1:\n                b[c] = \"+\" + encodeURI(a[c][1]);\n                break;\n            case -1:\n                b[c] = \"-\" + a[c][1].length;\n                break;\n            case 0:\n                b[c] = \"=\" + a[c][1].length\n        }\n        return b.join(\"\\t\").replace(/%20/g, \" \")\n    };\n    diff_match_patch.prototype.diff_fromDelta = function (a, b) {\n        for (var c = [], d = 0, e = 0, f = b.split(/\\t/g), g = 0; g < f.length; g++) {\n            var h = f[g].substring(1);\n            switch (f[g].charAt(0)) {\n                case \"+\":\n                    try {\n                        c[d++] = [1, decodeURI(h)]\n                    } catch (j) {\n                        throw Error(\"Illegal escape in diff_fromDelta: \" + h);\n                    }\n                    break;\n                case \"-\":\n                case \"=\":\n                    var i = parseInt(h, 10);\n                    if (isNaN(i) || 0 > i) throw Error(\"Invalid number in diff_fromDelta: \" + h);\n                    h = a.substring(e, e += i);\n                    \"=\" == f[g].charAt(0) ? c[d++] = [0, h] : c[d++] = [-1, h];\n                    break;\n                default:\n                    if (f[g]) throw Error(\"Invalid diff operation in diff_fromDelta: \" +\n                        f[g]);\n            }\n        }\n        if (e != a.length) throw Error(\"Delta length (\" + e + \") does not equal source text length (\" + a.length + \").\");\n        return c\n    };\n    diff_match_patch.prototype.match_main = function (a, b, c) {\n        if (null == a || null == b || null == c) throw Error(\"Null input. (match_main)\");\n        c = Math.max(0, Math.min(c, a.length));\n        return a == b ? 0 : a.length ? a.substring(c, c + b.length) == b ? c : this.match_bitap_(a, b, c) : -1\n    };\n    diff_match_patch.prototype.match_bitap_ = function (a, b, c) {\n        function d(a, d) {\n            var e = a / b.length,\n                g = Math.abs(c - d);\n            return !f.Match_Distance ? g ? 1 : e : e + g / f.Match_Distance\n        }\n        if (b.length > this.Match_MaxBits) throw Error(\"Pattern too long for this browser.\");\n        var e = this.match_alphabet_(b),\n            f = this,\n            g = this.Match_Threshold,\n            h = a.indexOf(b, c); - 1 != h && (g = Math.min(d(0, h), g), h = a.lastIndexOf(b, c + b.length), -1 != h && (g = Math.min(d(0, h), g)));\n        for (var j = 1 << b.length - 1, h = -1, i, k, q = b.length + a.length, r, t = 0; t < b.length; t++) {\n            i = 0;\n            for (k = q; i < k;) d(t, c +\n                k) <= g ? i = k : q = k, k = Math.floor((q - i) / 2 + i);\n            q = k;\n            i = Math.max(1, c - k + 1);\n            var p = Math.min(c + k, a.length) + b.length;\n            k = Array(p + 2);\n            for (k[p + 1] = (1 << t) - 1; p >= i; p--) {\n                var w = e[a.charAt(p - 1)];\n                k[p] = 0 === t ? (k[p + 1] << 1 | 1) & w : (k[p + 1] << 1 | 1) & w | ((r[p + 1] | r[p]) << 1 | 1) | r[p + 1];\n                if (k[p] & j && (w = d(t, p - 1), w <= g))\n                    if (g = w, h = p - 1, h > c) i = Math.max(1, 2 * c - h);\n                    else break\n            }\n            if (d(t + 1, c) > g) break;\n            r = k\n        }\n        return h\n    };\n    diff_match_patch.prototype.match_alphabet_ = function (a) {\n        for (var b = {}, c = 0; c < a.length; c++) b[a.charAt(c)] = 0;\n        for (c = 0; c < a.length; c++) b[a.charAt(c)] |= 1 << a.length - c - 1;\n        return b\n    };\n    diff_match_patch.prototype.patch_addContext_ = function (a, b) {\n        if (0 != b.length) {\n            for (var c = b.substring(a.start2, a.start2 + a.length1), d = 0; b.indexOf(c) != b.lastIndexOf(c) && c.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin;) d += this.Patch_Margin, c = b.substring(a.start2 - d, a.start2 + a.length1 + d);\n            d += this.Patch_Margin;\n            (c = b.substring(a.start2 - d, a.start2)) && a.diffs.unshift([0, c]);\n            (d = b.substring(a.start2 + a.length1, a.start2 + a.length1 + d)) && a.diffs.push([0, d]);\n            a.start1 -= c.length;\n            a.start2 -= c.length;\n            a.length1 +=\n                c.length + d.length;\n            a.length2 += c.length + d.length\n        }\n    };\n    diff_match_patch.prototype.patch_make = function (a, b, c) {\n        var d;\n        if (\"string\" == typeof a && \"string\" == typeof b && \"undefined\" == typeof c) d = a, b = this.diff_main(d, b, !0), 2 < b.length && (this.diff_cleanupSemantic(b), this.diff_cleanupEfficiency(b));\n        else if (a && \"object\" == typeof a && \"undefined\" == typeof b && \"undefined\" == typeof c) b = a, d = this.diff_text1(b);\n        else if (\"string\" == typeof a && b && \"object\" == typeof b && \"undefined\" == typeof c) d = a;\n        else if (\"string\" == typeof a && \"string\" == typeof b && c && \"object\" == typeof c) d = a, b = c;\n        else throw Error(\"Unknown call format to patch_make.\");\n        if (0 === b.length) return [];\n        c = [];\n        a = new diff_match_patch.patch_obj;\n        for (var e = 0, f = 0, g = 0, h = d, j = 0; j < b.length; j++) {\n            var i = b[j][0],\n                k = b[j][1];\n            !e && 0 !== i && (a.start1 = f, a.start2 = g);\n            switch (i) {\n                case 1:\n                    a.diffs[e++] = b[j];\n                    a.length2 += k.length;\n                    d = d.substring(0, g) + k + d.substring(g);\n                    break;\n                case -1:\n                    a.length1 += k.length;\n                    a.diffs[e++] = b[j];\n                    d = d.substring(0, g) + d.substring(g + k.length);\n                    break;\n                case 0:\n                    k.length <= 2 * this.Patch_Margin && e && b.length != j + 1 ? (a.diffs[e++] = b[j], a.length1 += k.length, a.length2 += k.length) : k.length >= 2 * this.Patch_Margin &&\n                        e && (this.patch_addContext_(a, h), c.push(a), a = new diff_match_patch.patch_obj, e = 0, h = d, f = g)\n            }\n            1 !== i && (f += k.length); - 1 !== i && (g += k.length)\n        }\n        e && (this.patch_addContext_(a, h), c.push(a));\n        return c\n    };\n    diff_match_patch.prototype.patch_deepCopy = function (a) {\n        for (var b = [], c = 0; c < a.length; c++) {\n            var d = a[c],\n                e = new diff_match_patch.patch_obj;\n            e.diffs = [];\n            for (var f = 0; f < d.diffs.length; f++) e.diffs[f] = d.diffs[f].slice();\n            e.start1 = d.start1;\n            e.start2 = d.start2;\n            e.length1 = d.length1;\n            e.length2 = d.length2;\n            b[c] = e\n        }\n        return b\n    };\n    diff_match_patch.prototype.patch_apply = function (a, b) {\n        if (0 == a.length) return [b, []];\n        a = this.patch_deepCopy(a);\n        var c = this.patch_addPadding(a);\n        b = c + b + c;\n        this.patch_splitMax(a);\n        for (var d = 0, e = [], f = 0; f < a.length; f++) {\n            var g = a[f].start2 + d,\n                h = this.diff_text1(a[f].diffs),\n                j, i = -1;\n            if (h.length > this.Match_MaxBits) {\n                if (j = this.match_main(b, h.substring(0, this.Match_MaxBits), g), -1 != j && (i = this.match_main(b, h.substring(h.length - this.Match_MaxBits), g + h.length - this.Match_MaxBits), -1 == i || j >= i)) j = -1\n            } else j = this.match_main(b, h, g);\n            if (-1 == j) e[f] = !1, d -= a[f].length2 - a[f].length1;\n            else if (e[f] = !0, d = j - g, g = -1 == i ? b.substring(j, j + h.length) : b.substring(j, i + this.Match_MaxBits), h == g) b = b.substring(0, j) + this.diff_text2(a[f].diffs) + b.substring(j + h.length);\n            else if (g = this.diff_main(h, g, !1), h.length > this.Match_MaxBits && this.diff_levenshtein(g) / h.length > this.Patch_DeleteThreshold) e[f] = !1;\n            else {\n                this.diff_cleanupSemanticLossless(g);\n                for (var h = 0, k, i = 0; i < a[f].diffs.length; i++) {\n                    var q = a[f].diffs[i];\n                    0 !== q[0] && (k = this.diff_xIndex(g, h));\n                    1 === q[0] ? b = b.substring(0,\n                        j + k) + q[1] + b.substring(j + k) : -1 === q[0] && (b = b.substring(0, j + k) + b.substring(j + this.diff_xIndex(g, h + q[1].length))); - 1 !== q[0] && (h += q[1].length)\n                }\n            }\n        }\n        b = b.substring(c.length, b.length - c.length);\n        return [b, e]\n    };\n    diff_match_patch.prototype.patch_addPadding = function (a) {\n        for (var b = this.Patch_Margin, c = \"\", d = 1; d <= b; d++) c += String.fromCharCode(d);\n        for (d = 0; d < a.length; d++) a[d].start1 += b, a[d].start2 += b;\n        var d = a[0],\n            e = d.diffs;\n        if (0 == e.length || 0 != e[0][0]) e.unshift([0, c]), d.start1 -= b, d.start2 -= b, d.length1 += b, d.length2 += b;\n        else if (b > e[0][1].length) {\n            var f = b - e[0][1].length;\n            e[0][1] = c.substring(e[0][1].length) + e[0][1];\n            d.start1 -= f;\n            d.start2 -= f;\n            d.length1 += f;\n            d.length2 += f\n        }\n        d = a[a.length - 1];\n        e = d.diffs;\n        0 == e.length || 0 != e[e.length - 1][0] ? (e.push([0,\n            c\n        ]), d.length1 += b, d.length2 += b) : b > e[e.length - 1][1].length && (f = b - e[e.length - 1][1].length, e[e.length - 1][1] += c.substring(0, f), d.length1 += f, d.length2 += f);\n        return c\n    };\n    diff_match_patch.prototype.patch_splitMax = function (a) {\n        for (var b = this.Match_MaxBits, c = 0; c < a.length; c++)\n            if (!(a[c].length1 <= b)) {\n                var d = a[c];\n                a.splice(c--, 1);\n                for (var e = d.start1, f = d.start2, g = \"\"; 0 !== d.diffs.length;) {\n                    var h = new diff_match_patch.patch_obj,\n                        j = !0;\n                    h.start1 = e - g.length;\n                    h.start2 = f - g.length;\n                    \"\" !== g && (h.length1 = h.length2 = g.length, h.diffs.push([0, g]));\n                    for (; 0 !== d.diffs.length && h.length1 < b - this.Patch_Margin;) {\n                        var g = d.diffs[0][0],\n                            i = d.diffs[0][1];\n                        1 === g ? (h.length2 += i.length, f += i.length, h.diffs.push(d.diffs.shift()),\n                            j = !1) : -1 === g && 1 == h.diffs.length && 0 == h.diffs[0][0] && i.length > 2 * b ? (h.length1 += i.length, e += i.length, j = !1, h.diffs.push([g, i]), d.diffs.shift()) : (i = i.substring(0, b - h.length1 - this.Patch_Margin), h.length1 += i.length, e += i.length, 0 === g ? (h.length2 += i.length, f += i.length) : j = !1, h.diffs.push([g, i]), i == d.diffs[0][1] ? d.diffs.shift() : d.diffs[0][1] = d.diffs[0][1].substring(i.length))\n                    }\n                    g = this.diff_text2(h.diffs);\n                    g = g.substring(g.length - this.Patch_Margin);\n                    i = this.diff_text1(d.diffs).substring(0, this.Patch_Margin);\n                    \"\" !== i &&\n                        (h.length1 += i.length, h.length2 += i.length, 0 !== h.diffs.length && 0 === h.diffs[h.diffs.length - 1][0] ? h.diffs[h.diffs.length - 1][1] += i : h.diffs.push([0, i]));\n                    j || a.splice(++c, 0, h)\n                }\n            }\n    };\n    diff_match_patch.prototype.patch_toText = function (a) {\n        for (var b = [], c = 0; c < a.length; c++) b[c] = a[c];\n        return b.join(\"\")\n    };\n    diff_match_patch.prototype.patch_fromText = function (a) {\n        var b = [];\n        if (!a) return b;\n        a = a.split(\"\\n\");\n        for (var c = 0, d = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/; c < a.length;) {\n            var e = a[c].match(d);\n            if (!e) throw Error(\"Invalid patch string: \" + a[c]);\n            var f = new diff_match_patch.patch_obj;\n            b.push(f);\n            f.start1 = parseInt(e[1], 10);\n            \"\" === e[2] ? (f.start1--, f.length1 = 1) : \"0\" == e[2] ? f.length1 = 0 : (f.start1--, f.length1 = parseInt(e[2], 10));\n            f.start2 = parseInt(e[3], 10);\n            \"\" === e[4] ? (f.start2--, f.length2 = 1) : \"0\" == e[4] ? f.length2 = 0 : (f.start2--, f.length2 =\n                parseInt(e[4], 10));\n            for (c++; c < a.length;) {\n                e = a[c].charAt(0);\n                try {\n                    var g = decodeURI(a[c].substring(1))\n                } catch (h) {\n                    throw Error(\"Illegal escape in patch_fromText: \" + g);\n                }\n                if (\"-\" == e) f.diffs.push([-1, g]);\n                else if (\"+\" == e) f.diffs.push([1, g]);\n                else if (\" \" == e) f.diffs.push([0, g]);\n                else if (\"@\" == e) break;\n                else if (\"\" !== e) throw Error('Invalid patch mode \"' + e + '\" in: ' + g);\n                c++\n            }\n        }\n        return b\n    };\n    diff_match_patch.patch_obj = function () {\n        this.diffs = [];\n        this.start2 = this.start1 = null;\n        this.length2 = this.length1 = 0\n    };\n    diff_match_patch.patch_obj.prototype.toString = function () {\n        var a, b;\n        a = 0 === this.length1 ? this.start1 + \",0\" : 1 == this.length1 ? this.start1 + 1 : this.start1 + 1 + \",\" + this.length1;\n        b = 0 === this.length2 ? this.start2 + \",0\" : 1 == this.length2 ? this.start2 + 1 : this.start2 + 1 + \",\" + this.length2;\n        a = [\"@@ -\" + a + \" +\" + b + \" @@\\n\"];\n        var c;\n        for (b = 0; b < this.diffs.length; b++) {\n            switch (this.diffs[b][0]) {\n                case 1:\n                    c = \"+\";\n                    break;\n                case -1:\n                    c = \"-\";\n                    break;\n                case 0:\n                    c = \" \"\n            }\n            a[b + 1] = c + encodeURI(this.diffs[b][1]) + \"\\n\"\n        }\n        return a.join(\"\").replace(/%20/g, \" \")\n    };\n    this.diff_match_patch = diff_match_patch;\n    this.DIFF_DELETE = -1;\n    this.DIFF_INSERT = 1;\n    this.DIFF_EQUAL = 0;\n\n    exports.diff_match_patch = diff_match_patch;\n\n})()",
            "created": "20180120063923147",
            "modified": "20190301000537293",
            "module-type": "library",
            "revision": "0",
            "tags": "",
            "type": "application/javascript"
        },
        "$:/plugins/ebalster/modloader/diff_patch_match_uncompressed.js": {
            "title": "$:/plugins/ebalster/modloader/diff_patch_match_uncompressed.js",
            "text": "// created: 20180120063923147\n// modified: 20190301000537293\n// module - type: library\n// revision: 0\n// tags:\n// title: $:/plugins/ebalster/modloader/diff_patch_match_uncompressed.js\n// type: application/javascript\n\n/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n    // Defaults.\n    // Redefine these in your program to override the defaults.\n  \n    // Number of seconds to map a diff before giving up (0 for infinity).\n    this.Diff_Timeout = 1.0;\n    // Cost of an empty edit operation in terms of edit characters.\n    this.Diff_EditCost = 4;\n    // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n    this.Match_Threshold = 0.5;\n    // How far to search for a match (0 = exact location, 1000+ = broad match).\n    // A match this many characters away from the expected location will add\n    // 1.0 to the score (0.0 is a perfect match).\n    this.Match_Distance = 1000;\n    // When deleting a large block of text (over ~64 characters), how close do\n    // the contents have to be to match the expected contents. (0.0 = perfection,\n    // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n    // end points of a delete need to match.\n    this.Patch_DeleteThreshold = 0.5;\n    // Chunk size for context length.\n    this.Patch_Margin = 4;\n  \n    // The number of bits in an int.\n    this.Match_MaxBits = 32;\n  };\n  \n  \n  //  DIFF FUNCTIONS\n  \n  \n  /**\n   * The data structure representing a diff is an array of tuples:\n   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n   */\n  var DIFF_DELETE = -1;\n  var DIFF_INSERT = 1;\n  var DIFF_EQUAL = 0;\n  \n  /**\n   * Class representing one diff tuple.\n   * Attempts to look like a two-element array (which is what this used to be).\n   * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n   * @param {string} text Text to be deleted, inserted, or retained.\n   * @constructor\n   */\n  diff_match_patch.Diff = function(op, text) {\n    this[0] = op;\n    this[1] = text;\n  };\n  \n  diff_match_patch.Diff.prototype.length = 2;\n  \n  /**\n   * Emulate the output of a two-element array.\n   * @return {string} Diff operation as a string.\n   */\n  diff_match_patch.Diff.prototype.toString = function() {\n    return this[0] + ',' + this[1];\n  };\n  \n  \n  /**\n   * Find the differences between two texts.  Simplifies the problem by stripping\n   * any common prefix or suffix off the texts before diffing.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n   *     then don't run a line-level diff first to identify the changed areas.\n   *     Defaults to true, which does a faster, slightly less optimal diff.\n   * @param {number=} opt_deadline Optional time when the diff should be complete\n   *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n   *     instead.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n      opt_deadline) {\n    // Set a deadline by which time the diff must be complete.\n    if (typeof opt_deadline == 'undefined') {\n      if (this.Diff_Timeout <= 0) {\n        opt_deadline = Number.MAX_VALUE;\n      } else {\n        opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n      }\n    }\n    var deadline = opt_deadline;\n  \n    // Check for null inputs.\n    if (text1 == null || text2 == null) {\n      throw new Error('Null input. (diff_main)');\n    }\n  \n    // Check for equality (speedup).\n    if (text1 == text2) {\n      if (text1) {\n        return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n      }\n      return [];\n    }\n  \n    if (typeof opt_checklines == 'undefined') {\n      opt_checklines = true;\n    }\n    var checklines = opt_checklines;\n  \n    // Trim off common prefix (speedup).\n    var commonlength = this.diff_commonPrefix(text1, text2);\n    var commonprefix = text1.substring(0, commonlength);\n    text1 = text1.substring(commonlength);\n    text2 = text2.substring(commonlength);\n  \n    // Trim off common suffix (speedup).\n    commonlength = this.diff_commonSuffix(text1, text2);\n    var commonsuffix = text1.substring(text1.length - commonlength);\n    text1 = text1.substring(0, text1.length - commonlength);\n    text2 = text2.substring(0, text2.length - commonlength);\n  \n    // Compute the diff on the middle block.\n    var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n  \n    // Restore the prefix and suffix.\n    if (commonprefix) {\n      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n    }\n    if (commonsuffix) {\n      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n    }\n    this.diff_cleanupMerge(diffs);\n    return diffs;\n  };\n  \n  \n  /**\n   * Find the differences between two texts.  Assumes that the texts do not\n   * have any common prefix or suffix.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {boolean} checklines Speedup flag.  If false, then don't run a\n   *     line-level diff first to identify the changed areas.\n   *     If true, then run a faster, slightly less optimal diff.\n   * @param {number} deadline Time when the diff should be complete by.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n      deadline) {\n    var diffs;\n  \n    if (!text1) {\n      // Just add some text (speedup).\n      return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n    }\n  \n    if (!text2) {\n      // Just delete some text (speedup).\n      return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n    }\n  \n    var longtext = text1.length > text2.length ? text1 : text2;\n    var shorttext = text1.length > text2.length ? text2 : text1;\n    var i = longtext.indexOf(shorttext);\n    if (i != -1) {\n      // Shorter text is inside the longer text (speedup).\n      diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n               new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n               new diff_match_patch.Diff(DIFF_INSERT,\n                   longtext.substring(i + shorttext.length))];\n      // Swap insertions for deletions if diff is reversed.\n      if (text1.length > text2.length) {\n        diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n      }\n      return diffs;\n    }\n  \n    if (shorttext.length == 1) {\n      // Single character string.\n      // After the previous speedup, the character can't be an equality.\n      return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n              new diff_match_patch.Diff(DIFF_INSERT, text2)];\n    }\n  \n    // Check to see if the problem can be split in two.\n    var hm = this.diff_halfMatch_(text1, text2);\n    if (hm) {\n      // A half-match was found, sort out the return data.\n      var text1_a = hm[0];\n      var text1_b = hm[1];\n      var text2_a = hm[2];\n      var text2_b = hm[3];\n      var mid_common = hm[4];\n      // Send both pairs off for separate processing.\n      var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n      var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n      // Merge the results.\n      return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                            diffs_b);\n    }\n  \n    if (checklines && text1.length > 100 && text2.length > 100) {\n      return this.diff_lineMode_(text1, text2, deadline);\n    }\n  \n    return this.diff_bisect_(text1, text2, deadline);\n  };\n  \n  \n  /**\n   * Do a quick line-level diff on both strings, then rediff the parts for\n   * greater accuracy.\n   * This speedup can produce non-minimal diffs.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} deadline Time when the diff should be complete by.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n    // Scan the text on a line-by-line basis first.\n    var a = this.diff_linesToChars_(text1, text2);\n    text1 = a.chars1;\n    text2 = a.chars2;\n    var linearray = a.lineArray;\n  \n    var diffs = this.diff_main(text1, text2, false, deadline);\n  \n    // Convert the diff back to original text.\n    this.diff_charsToLines_(diffs, linearray);\n    // Eliminate freak matches (e.g. blank lines)\n    this.diff_cleanupSemantic(diffs);\n  \n    // Rediff any replacement blocks, this time character-by-character.\n    // Add a dummy entry at the end.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n    var pointer = 0;\n    var count_delete = 0;\n    var count_insert = 0;\n    var text_delete = '';\n    var text_insert = '';\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DIFF_INSERT:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          break;\n        case DIFF_DELETE:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          break;\n        case DIFF_EQUAL:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete >= 1 && count_insert >= 1) {\n            // Delete the offending records and add the merged ones.\n            diffs.splice(pointer - count_delete - count_insert,\n                         count_delete + count_insert);\n            pointer = pointer - count_delete - count_insert;\n            var subDiff =\n                this.diff_main(text_delete, text_insert, false, deadline);\n            for (var j = subDiff.length - 1; j >= 0; j--) {\n              diffs.splice(pointer, 0, subDiff[j]);\n            }\n            pointer = pointer + subDiff.length;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n      pointer++;\n    }\n    diffs.pop();  // Remove the dummy entry at the end.\n  \n    return diffs;\n  };\n  \n  \n  /**\n   * Find the 'middle snake' of a diff, split the problem in two\n   * and return the recursively constructed diff.\n   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} deadline Time at which to bail if not yet complete.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n    // Cache the text lengths to prevent multiple calls.\n    var text1_length = text1.length;\n    var text2_length = text2.length;\n    var max_d = Math.ceil((text1_length + text2_length) / 2);\n    var v_offset = max_d;\n    var v_length = 2 * max_d;\n    var v1 = new Array(v_length);\n    var v2 = new Array(v_length);\n    // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n    // integers and undefined.\n    for (var x = 0; x < v_length; x++) {\n      v1[x] = -1;\n      v2[x] = -1;\n    }\n    v1[v_offset + 1] = 0;\n    v2[v_offset + 1] = 0;\n    var delta = text1_length - text2_length;\n    // If the total number of characters is odd, then the front path will collide\n    // with the reverse path.\n    var front = (delta % 2 != 0);\n    // Offsets for start and end of k loop.\n    // Prevents mapping of space beyond the grid.\n    var k1start = 0;\n    var k1end = 0;\n    var k2start = 0;\n    var k2end = 0;\n    for (var d = 0; d < max_d; d++) {\n      // Bail out if deadline is reached.\n      if ((new Date()).getTime() > deadline) {\n        break;\n      }\n  \n      // Walk the front path one step.\n      for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n        var k1_offset = v_offset + k1;\n        var x1;\n        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n          x1 = v1[k1_offset + 1];\n        } else {\n          x1 = v1[k1_offset - 1] + 1;\n        }\n        var y1 = x1 - k1;\n        while (x1 < text1_length && y1 < text2_length &&\n               text1.charAt(x1) == text2.charAt(y1)) {\n          x1++;\n          y1++;\n        }\n        v1[k1_offset] = x1;\n        if (x1 > text1_length) {\n          // Ran off the right of the graph.\n          k1end += 2;\n        } else if (y1 > text2_length) {\n          // Ran off the bottom of the graph.\n          k1start += 2;\n        } else if (front) {\n          var k2_offset = v_offset + delta - k1;\n          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n            // Mirror x2 onto top-left coordinate system.\n            var x2 = text1_length - v2[k2_offset];\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n  \n      // Walk the reverse path one step.\n      for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n        var k2_offset = v_offset + k2;\n        var x2;\n        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n          x2 = v2[k2_offset + 1];\n        } else {\n          x2 = v2[k2_offset - 1] + 1;\n        }\n        var y2 = x2 - k2;\n        while (x2 < text1_length && y2 < text2_length &&\n               text1.charAt(text1_length - x2 - 1) ==\n               text2.charAt(text2_length - y2 - 1)) {\n          x2++;\n          y2++;\n        }\n        v2[k2_offset] = x2;\n        if (x2 > text1_length) {\n          // Ran off the left of the graph.\n          k2end += 2;\n        } else if (y2 > text2_length) {\n          // Ran off the top of the graph.\n          k2start += 2;\n        } else if (!front) {\n          var k1_offset = v_offset + delta - k2;\n          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n            var x1 = v1[k1_offset];\n            var y1 = v_offset + x1 - k1_offset;\n            // Mirror x2 onto top-left coordinate system.\n            x2 = text1_length - x2;\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n    }\n    // Diff took too long and hit the deadline or\n    // number of diffs equals number of characters, no commonality at all.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  };\n  \n  \n  /**\n   * Given the location of the 'middle snake', split the diff in two parts\n   * and recurse.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} x Index of split point in text1.\n   * @param {number} y Index of split point in text2.\n   * @param {number} deadline Time at which to bail if not yet complete.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n      deadline) {\n    var text1a = text1.substring(0, x);\n    var text2a = text2.substring(0, y);\n    var text1b = text1.substring(x);\n    var text2b = text2.substring(y);\n  \n    // Compute both diffs serially.\n    var diffs = this.diff_main(text1a, text2a, false, deadline);\n    var diffsb = this.diff_main(text1b, text2b, false, deadline);\n  \n    return diffs.concat(diffsb);\n  };\n  \n  \n  /**\n   * Split two texts into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n   *     An object containing the encoded text1, the encoded text2 and\n   *     the array of unique strings.\n   *     The zeroth element of the array of unique strings is intentionally blank.\n   * @private\n   */\n  diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n    var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n    var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n  \n    // '\\x00' is a valid character, but various debuggers don't like it.\n    // So we'll insert a junk entry to avoid generating a null character.\n    lineArray[0] = '';\n  \n    /**\n     * Split a text into an array of strings.  Reduce the texts to a string of\n     * hashes where each Unicode character represents one line.\n     * Modifies linearray and linehash through being a closure.\n     * @param {string} text String to encode.\n     * @return {string} Encoded string.\n     * @private\n     */\n    function diff_linesToCharsMunge_(text) {\n      var chars = '';\n      // Walk the text, pulling out a substring for each line.\n      // text.split('\\n') would would temporarily double our memory footprint.\n      // Modifying text would create many large strings to garbage collect.\n      var lineStart = 0;\n      var lineEnd = -1;\n      // Keeping our own length variable is faster than looking it up.\n      var lineArrayLength = lineArray.length;\n      while (lineEnd < text.length - 1) {\n        lineEnd = text.indexOf('\\n', lineStart);\n        if (lineEnd == -1) {\n          lineEnd = text.length - 1;\n        }\n        var line = text.substring(lineStart, lineEnd + 1);\n  \n        if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n            (lineHash[line] !== undefined)) {\n          chars += String.fromCharCode(lineHash[line]);\n        } else {\n          if (lineArrayLength == maxLines) {\n            // Bail out at 65535 because\n            // String.fromCharCode(65536) == String.fromCharCode(0)\n            line = text.substring(lineStart);\n            lineEnd = text.length;\n          }\n          chars += String.fromCharCode(lineArrayLength);\n          lineHash[line] = lineArrayLength;\n          lineArray[lineArrayLength++] = line;\n        }\n        lineStart = lineEnd + 1;\n      }\n      return chars;\n    }\n    // Allocate 2/3rds of the space for text1, the rest for text2.\n    var maxLines = 40000;\n    var chars1 = diff_linesToCharsMunge_(text1);\n    maxLines = 65535;\n    var chars2 = diff_linesToCharsMunge_(text2);\n    return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n  };\n  \n  \n  /**\n   * Rehydrate the text in a diff from a string of line hashes to real lines of\n   * text.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @param {!Array.<string>} lineArray Array of unique strings.\n   * @private\n   */\n  diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n    for (var i = 0; i < diffs.length; i++) {\n      var chars = diffs[i][1];\n      var text = [];\n      for (var j = 0; j < chars.length; j++) {\n        text[j] = lineArray[chars.charCodeAt(j)];\n      }\n      diffs[i][1] = text.join('');\n    }\n  };\n  \n  \n  /**\n   * Determine the common prefix of two strings.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the start of each\n   *     string.\n   */\n  diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n    // Quick check for common null cases.\n    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n    var pointermin = 0;\n    var pointermax = Math.min(text1.length, text2.length);\n    var pointermid = pointermax;\n    var pointerstart = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(pointerstart, pointermid) ==\n          text2.substring(pointerstart, pointermid)) {\n        pointermin = pointermid;\n        pointerstart = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n  \n  \n  /**\n   * Determine the common suffix of two strings.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the end of each string.\n   */\n  diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n    // Quick check for common null cases.\n    if (!text1 || !text2 ||\n        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n    var pointermin = 0;\n    var pointermax = Math.min(text1.length, text2.length);\n    var pointermid = pointermax;\n    var pointerend = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n          text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n        pointermin = pointermid;\n        pointerend = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n  \n  \n  /**\n   * Determine if the suffix of one string is the prefix of another.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the end of the first\n   *     string and the start of the second string.\n   * @private\n   */\n  diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n    // Cache the text lengths to prevent multiple calls.\n    var text1_length = text1.length;\n    var text2_length = text2.length;\n    // Eliminate the null case.\n    if (text1_length == 0 || text2_length == 0) {\n      return 0;\n    }\n    // Truncate the longer string.\n    if (text1_length > text2_length) {\n      text1 = text1.substring(text1_length - text2_length);\n    } else if (text1_length < text2_length) {\n      text2 = text2.substring(0, text1_length);\n    }\n    var text_length = Math.min(text1_length, text2_length);\n    // Quick check for the worst case.\n    if (text1 == text2) {\n      return text_length;\n    }\n  \n    // Start by looking for a single character match\n    // and increase length until no match is found.\n    // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n    var best = 0;\n    var length = 1;\n    while (true) {\n      var pattern = text1.substring(text_length - length);\n      var found = text2.indexOf(pattern);\n      if (found == -1) {\n        return best;\n      }\n      length += found;\n      if (found == 0 || text1.substring(text_length - length) ==\n          text2.substring(0, length)) {\n        best = length;\n        length++;\n      }\n    }\n  };\n  \n  \n  /**\n   * Do the two texts share a substring which is at least half the length of the\n   * longer text?\n   * This speedup can produce non-minimal diffs.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     text1, the suffix of text1, the prefix of text2, the suffix of\n   *     text2 and the common middle.  Or null if there was no match.\n   * @private\n   */\n  diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n    if (this.Diff_Timeout <= 0) {\n      // Don't risk returning a non-optimal diff if we have unlimited time.\n      return null;\n    }\n    var longtext = text1.length > text2.length ? text1 : text2;\n    var shorttext = text1.length > text2.length ? text2 : text1;\n    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n      return null;  // Pointless.\n    }\n    var dmp = this;  // 'this' becomes 'window' in a closure.\n  \n    /**\n     * Does a substring of shorttext exist within longtext such that the substring\n     * is at least half the length of longtext?\n     * Closure, but does not reference any external variables.\n     * @param {string} longtext Longer string.\n     * @param {string} shorttext Shorter string.\n     * @param {number} i Start index of quarter length substring within longtext.\n     * @return {Array.<string>} Five element Array, containing the prefix of\n     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n     *     of shorttext and the common middle.  Or null if there was no match.\n     * @private\n     */\n    function diff_halfMatchI_(longtext, shorttext, i) {\n      // Start with a 1/4 length substring at position i as a seed.\n      var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n      var j = -1;\n      var best_common = '';\n      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n      while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n        var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                                 shorttext.substring(j));\n        var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                                 shorttext.substring(0, j));\n        if (best_common.length < suffixLength + prefixLength) {\n          best_common = shorttext.substring(j - suffixLength, j) +\n              shorttext.substring(j, j + prefixLength);\n          best_longtext_a = longtext.substring(0, i - suffixLength);\n          best_longtext_b = longtext.substring(i + prefixLength);\n          best_shorttext_a = shorttext.substring(0, j - suffixLength);\n          best_shorttext_b = shorttext.substring(j + prefixLength);\n        }\n      }\n      if (best_common.length * 2 >= longtext.length) {\n        return [best_longtext_a, best_longtext_b,\n                best_shorttext_a, best_shorttext_b, best_common];\n      } else {\n        return null;\n      }\n    }\n  \n    // First check if the second quarter is the seed for a half-match.\n    var hm1 = diff_halfMatchI_(longtext, shorttext,\n                               Math.ceil(longtext.length / 4));\n    // Check again based on the third quarter.\n    var hm2 = diff_halfMatchI_(longtext, shorttext,\n                               Math.ceil(longtext.length / 2));\n    var hm;\n    if (!hm1 && !hm2) {\n      return null;\n    } else if (!hm2) {\n      hm = hm1;\n    } else if (!hm1) {\n      hm = hm2;\n    } else {\n      // Both matched.  Select the longest.\n      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n    }\n  \n    // A half-match was found, sort out the return data.\n    var text1_a, text1_b, text2_a, text2_b;\n    if (text1.length > text2.length) {\n      text1_a = hm[0];\n      text1_b = hm[1];\n      text2_a = hm[2];\n      text2_b = hm[3];\n    } else {\n      text2_a = hm[0];\n      text2_b = hm[1];\n      text1_a = hm[2];\n      text1_b = hm[3];\n    }\n    var mid_common = hm[4];\n    return [text1_a, text1_b, text2_a, text2_b, mid_common];\n  };\n  \n  \n  /**\n   * Reduce the number of edits by eliminating semantically trivial equalities.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n    var changes = false;\n    var equalities = [];  // Stack of indices where equalities are found.\n    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n    /** @type {?string} */\n    var lastEquality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    var pointer = 0;  // Index of current position.\n    // Number of characters that changed prior to the equality.\n    var length_insertions1 = 0;\n    var length_deletions1 = 0;\n    // Number of characters that changed after the equality.\n    var length_insertions2 = 0;\n    var length_deletions2 = 0;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n        equalities[equalitiesLength++] = pointer;\n        length_insertions1 = length_insertions2;\n        length_deletions1 = length_deletions2;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = diffs[pointer][1];\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DIFF_INSERT) {\n          length_insertions2 += diffs[pointer][1].length;\n        } else {\n          length_deletions2 += diffs[pointer][1].length;\n        }\n        // Eliminate an equality that is smaller or equal to the edits on both\n        // sides of it.\n        if (lastEquality && (lastEquality.length <=\n            Math.max(length_insertions1, length_deletions1)) &&\n            (lastEquality.length <= Math.max(length_insertions2,\n                                             length_deletions2))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                       new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n          // Throw away the equality we just deleted.\n          equalitiesLength--;\n          // Throw away the previous equality (it needs to be reevaluated).\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          length_insertions1 = 0;  // Reset the counters.\n          length_deletions1 = 0;\n          length_insertions2 = 0;\n          length_deletions2 = 0;\n          lastEquality = null;\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n  \n    // Normalize the diff.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n    this.diff_cleanupSemanticLossless(diffs);\n  \n    // Find any overlaps between deletions and insertions.\n    // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n    //   -> <del>abc</del>xxx<ins>def</ins>\n    // e.g: <del>xxxabc</del><ins>defxxx</ins>\n    //   -> <ins>def</ins>xxx<del>abc</del>\n    // Only extract an overlap if it is as big as the edit ahead or behind it.\n    pointer = 1;\n    while (pointer < diffs.length) {\n      if (diffs[pointer - 1][0] == DIFF_DELETE &&\n          diffs[pointer][0] == DIFF_INSERT) {\n        var deletion = diffs[pointer - 1][1];\n        var insertion = diffs[pointer][1];\n        var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n        var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n        if (overlap_length1 >= overlap_length2) {\n          if (overlap_length1 >= deletion.length / 2 ||\n              overlap_length1 >= insertion.length / 2) {\n            // Overlap found.  Insert an equality and trim the surrounding edits.\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                insertion.substring(0, overlap_length1)));\n            diffs[pointer - 1][1] =\n                deletion.substring(0, deletion.length - overlap_length1);\n            diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n            pointer++;\n          }\n        } else {\n          if (overlap_length2 >= deletion.length / 2 ||\n              overlap_length2 >= insertion.length / 2) {\n            // Reverse overlap found.\n            // Insert an equality and swap and trim the surrounding edits.\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                deletion.substring(0, overlap_length2)));\n            diffs[pointer - 1][0] = DIFF_INSERT;\n            diffs[pointer - 1][1] =\n                insertion.substring(0, insertion.length - overlap_length2);\n            diffs[pointer + 1][0] = DIFF_DELETE;\n            diffs[pointer + 1][1] =\n                deletion.substring(overlap_length2);\n            pointer++;\n          }\n        }\n        pointer++;\n      }\n      pointer++;\n    }\n  };\n  \n  \n  /**\n   * Look for single edits surrounded on both sides by equalities\n   * which can be shifted sideways to align the edit to a word boundary.\n   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n    /**\n     * Given two strings, compute a score representing whether the internal\n     * boundary falls on logical boundaries.\n     * Scores range from 6 (best) to 0 (worst).\n     * Closure, but does not reference any external variables.\n     * @param {string} one First string.\n     * @param {string} two Second string.\n     * @return {number} The score.\n     * @private\n     */\n    function diff_cleanupSemanticScore_(one, two) {\n      if (!one || !two) {\n        // Edges are the best.\n        return 6;\n      }\n  \n      // Each port of this function behaves slightly differently due to\n      // subtle differences in each language's definition of things like\n      // 'whitespace'.  Since this function's purpose is largely cosmetic,\n      // the choice has been made to use each language's native features\n      // rather than force total conformity.\n      var char1 = one.charAt(one.length - 1);\n      var char2 = two.charAt(0);\n      var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n      var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n      var whitespace1 = nonAlphaNumeric1 &&\n          char1.match(diff_match_patch.whitespaceRegex_);\n      var whitespace2 = nonAlphaNumeric2 &&\n          char2.match(diff_match_patch.whitespaceRegex_);\n      var lineBreak1 = whitespace1 &&\n          char1.match(diff_match_patch.linebreakRegex_);\n      var lineBreak2 = whitespace2 &&\n          char2.match(diff_match_patch.linebreakRegex_);\n      var blankLine1 = lineBreak1 &&\n          one.match(diff_match_patch.blanklineEndRegex_);\n      var blankLine2 = lineBreak2 &&\n          two.match(diff_match_patch.blanklineStartRegex_);\n  \n      if (blankLine1 || blankLine2) {\n        // Five points for blank lines.\n        return 5;\n      } else if (lineBreak1 || lineBreak2) {\n        // Four points for line breaks.\n        return 4;\n      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n        // Three points for end of sentences.\n        return 3;\n      } else if (whitespace1 || whitespace2) {\n        // Two points for whitespace.\n        return 2;\n      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n        // One point for non-alphanumeric.\n        return 1;\n      }\n      return 0;\n    }\n  \n    var pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n          diffs[pointer + 1][0] == DIFF_EQUAL) {\n        // This is a single edit surrounded by equalities.\n        var equality1 = diffs[pointer - 1][1];\n        var edit = diffs[pointer][1];\n        var equality2 = diffs[pointer + 1][1];\n  \n        // First, shift the edit as far left as possible.\n        var commonOffset = this.diff_commonSuffix(equality1, edit);\n        if (commonOffset) {\n          var commonString = edit.substring(edit.length - commonOffset);\n          equality1 = equality1.substring(0, equality1.length - commonOffset);\n          edit = commonString + edit.substring(0, edit.length - commonOffset);\n          equality2 = commonString + equality2;\n        }\n  \n        // Second, step character by character right, looking for the best fit.\n        var bestEquality1 = equality1;\n        var bestEdit = edit;\n        var bestEquality2 = equality2;\n        var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        while (edit.charAt(0) === equality2.charAt(0)) {\n          equality1 += edit.charAt(0);\n          edit = edit.substring(1) + equality2.charAt(0);\n          equality2 = equality2.substring(1);\n          var score = diff_cleanupSemanticScore_(equality1, edit) +\n              diff_cleanupSemanticScore_(edit, equality2);\n          // The >= encourages trailing rather than leading whitespace on edits.\n          if (score >= bestScore) {\n            bestScore = score;\n            bestEquality1 = equality1;\n            bestEdit = edit;\n            bestEquality2 = equality2;\n          }\n        }\n  \n        if (diffs[pointer - 1][1] != bestEquality1) {\n          // We have an improvement, save it back to the diff.\n          if (bestEquality1) {\n            diffs[pointer - 1][1] = bestEquality1;\n          } else {\n            diffs.splice(pointer - 1, 1);\n            pointer--;\n          }\n          diffs[pointer][1] = bestEdit;\n          if (bestEquality2) {\n            diffs[pointer + 1][1] = bestEquality2;\n          } else {\n            diffs.splice(pointer + 1, 1);\n            pointer--;\n          }\n        }\n      }\n      pointer++;\n    }\n  };\n  \n  // Define some regex patterns for matching boundaries.\n  diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\n  diff_match_patch.whitespaceRegex_ = /\\s/;\n  diff_match_patch.linebreakRegex_ = /[\\r\\n]/;\n  diff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\n  diff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n  \n  /**\n   * Reduce the number of edits by eliminating operationally trivial equalities.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n    var changes = false;\n    var equalities = [];  // Stack of indices where equalities are found.\n    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n    /** @type {?string} */\n    var lastEquality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    var pointer = 0;  // Index of current position.\n    // Is there an insertion operation before the last equality.\n    var pre_ins = false;\n    // Is there a deletion operation before the last equality.\n    var pre_del = false;\n    // Is there an insertion operation after the last equality.\n    var post_ins = false;\n    // Is there a deletion operation after the last equality.\n    var post_del = false;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n        if (diffs[pointer][1].length < this.Diff_EditCost &&\n            (post_ins || post_del)) {\n          // Candidate found.\n          equalities[equalitiesLength++] = pointer;\n          pre_ins = post_ins;\n          pre_del = post_del;\n          lastEquality = diffs[pointer][1];\n        } else {\n          // Not a candidate, and can never become one.\n          equalitiesLength = 0;\n          lastEquality = null;\n        }\n        post_ins = post_del = false;\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DIFF_DELETE) {\n          post_del = true;\n        } else {\n          post_ins = true;\n        }\n        /*\n         * Five types to be split:\n         * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n         * <ins>A</ins>X<ins>C</ins><del>D</del>\n         * <ins>A</ins><del>B</del>X<ins>C</ins>\n         * <ins>A</del>X<ins>C</ins><del>D</del>\n         * <ins>A</ins><del>B</del>X<del>C</del>\n         */\n        if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                             ((lastEquality.length < this.Diff_EditCost / 2) &&\n                              (pre_ins + pre_del + post_ins + post_del) == 3))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                       new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n          equalitiesLength--;  // Throw away the equality we just deleted;\n          lastEquality = null;\n          if (pre_ins && pre_del) {\n            // No changes made which could affect previous entry, keep going.\n            post_ins = post_del = true;\n            equalitiesLength = 0;\n          } else {\n            equalitiesLength--;  // Throw away the previous equality.\n            pointer = equalitiesLength > 0 ?\n                equalities[equalitiesLength - 1] : -1;\n            post_ins = post_del = false;\n          }\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n  \n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n  \n  \n  /**\n   * Reorder and merge like edit sections.  Merge equalities.\n   * Any edit section can move as long as it doesn't cross an equality.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n    // Add a dummy entry at the end.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n    var pointer = 0;\n    var count_delete = 0;\n    var count_insert = 0;\n    var text_delete = '';\n    var text_insert = '';\n    var commonlength;\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DIFF_INSERT:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          pointer++;\n          break;\n        case DIFF_DELETE:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          pointer++;\n          break;\n        case DIFF_EQUAL:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete + count_insert > 1) {\n            if (count_delete !== 0 && count_insert !== 0) {\n              // Factor out any common prefixies.\n              commonlength = this.diff_commonPrefix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                if ((pointer - count_delete - count_insert) > 0 &&\n                    diffs[pointer - count_delete - count_insert - 1][0] ==\n                    DIFF_EQUAL) {\n                  diffs[pointer - count_delete - count_insert - 1][1] +=\n                      text_insert.substring(0, commonlength);\n                } else {\n                  diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                      text_insert.substring(0, commonlength)));\n                  pointer++;\n                }\n                text_insert = text_insert.substring(commonlength);\n                text_delete = text_delete.substring(commonlength);\n              }\n              // Factor out any common suffixies.\n              commonlength = this.diff_commonSuffix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                diffs[pointer][1] = text_insert.substring(text_insert.length -\n                    commonlength) + diffs[pointer][1];\n                text_insert = text_insert.substring(0, text_insert.length -\n                    commonlength);\n                text_delete = text_delete.substring(0, text_delete.length -\n                    commonlength);\n              }\n            }\n            // Delete the offending records and add the merged ones.\n            pointer -= count_delete + count_insert;\n            diffs.splice(pointer, count_delete + count_insert);\n            if (text_delete.length) {\n              diffs.splice(pointer, 0,\n                  new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n              pointer++;\n            }\n            if (text_insert.length) {\n              diffs.splice(pointer, 0,\n                  new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n              pointer++;\n            }\n            pointer++;\n          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n            // Merge this equality with the previous one.\n            diffs[pointer - 1][1] += diffs[pointer][1];\n            diffs.splice(pointer, 1);\n          } else {\n            pointer++;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n    }\n    if (diffs[diffs.length - 1][1] === '') {\n      diffs.pop();  // Remove the dummy entry at the end.\n    }\n  \n    // Second pass: look for single edits surrounded on both sides by equalities\n    // which can be shifted sideways to eliminate an equality.\n    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n    var changes = false;\n    pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n          diffs[pointer + 1][0] == DIFF_EQUAL) {\n        // This is a single edit surrounded by equalities.\n        if (diffs[pointer][1].substring(diffs[pointer][1].length -\n            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n          // Shift the edit over the previous equality.\n          diffs[pointer][1] = diffs[pointer - 1][1] +\n              diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                          diffs[pointer - 1][1].length);\n          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n          diffs.splice(pointer - 1, 1);\n          changes = true;\n        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n            diffs[pointer + 1][1]) {\n          // Shift the edit over the next equality.\n          diffs[pointer - 1][1] += diffs[pointer + 1][1];\n          diffs[pointer][1] =\n              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n              diffs[pointer + 1][1];\n          diffs.splice(pointer + 1, 1);\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n    // If shifts were made, the diff needs reordering and another shift sweep.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n  \n  \n  /**\n   * loc is a location in text1, compute and return the equivalent location in\n   * text2.\n   * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @param {number} loc Location within text1.\n   * @return {number} Location within text2.\n   */\n  diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n    var chars1 = 0;\n    var chars2 = 0;\n    var last_chars1 = 0;\n    var last_chars2 = 0;\n    var x;\n    for (x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n        chars1 += diffs[x][1].length;\n      }\n      if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n        chars2 += diffs[x][1].length;\n      }\n      if (chars1 > loc) {  // Overshot the location.\n        break;\n      }\n      last_chars1 = chars1;\n      last_chars2 = chars2;\n    }\n    // Was the location was deleted?\n    if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n      return last_chars2;\n    }\n    // Add the remaining character length.\n    return last_chars2 + (loc - last_chars1);\n  };\n  \n  \n  /**\n   * Convert a diff array into a pretty HTML report.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} HTML representation.\n   */\n  diff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n    var html = [];\n    var pattern_amp = /&/g;\n    var pattern_lt = /</g;\n    var pattern_gt = />/g;\n    var pattern_para = /\\n/g;\n    for (var x = 0; x < diffs.length; x++) {\n      var op = diffs[x][0];    // Operation (insert, delete, equal)\n      var data = diffs[x][1];  // Text of change.\n      var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n          .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n      switch (op) {\n        case DIFF_INSERT:\n          html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n          break;\n        case DIFF_DELETE:\n          html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n          break;\n        case DIFF_EQUAL:\n          html[x] = '<span>' + text + '</span>';\n          break;\n      }\n    }\n    return html.join('');\n  };\n  \n  \n  /**\n   * Compute and return the source text (all equalities and deletions).\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Source text.\n   */\n  diff_match_patch.prototype.diff_text1 = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_INSERT) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Compute and return the destination text (all equalities and insertions).\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Destination text.\n   */\n  diff_match_patch.prototype.diff_text2 = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_DELETE) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Compute the Levenshtein distance; the number of inserted, deleted or\n   * substituted characters.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {number} Number of changes.\n   */\n  diff_match_patch.prototype.diff_levenshtein = function(diffs) {\n    var levenshtein = 0;\n    var insertions = 0;\n    var deletions = 0;\n    for (var x = 0; x < diffs.length; x++) {\n      var op = diffs[x][0];\n      var data = diffs[x][1];\n      switch (op) {\n        case DIFF_INSERT:\n          insertions += data.length;\n          break;\n        case DIFF_DELETE:\n          deletions += data.length;\n          break;\n        case DIFF_EQUAL:\n          // A deletion and an insertion is one substitution.\n          levenshtein += Math.max(insertions, deletions);\n          insertions = 0;\n          deletions = 0;\n          break;\n      }\n    }\n    levenshtein += Math.max(insertions, deletions);\n    return levenshtein;\n  };\n  \n  \n  /**\n   * Crush the diff into an encoded string which describes the operations\n   * required to transform text1 into text2.\n   * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n   * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Delta text.\n   */\n  diff_match_patch.prototype.diff_toDelta = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      switch (diffs[x][0]) {\n        case DIFF_INSERT:\n          text[x] = '+' + encodeURI(diffs[x][1]);\n          break;\n        case DIFF_DELETE:\n          text[x] = '-' + diffs[x][1].length;\n          break;\n        case DIFF_EQUAL:\n          text[x] = '=' + diffs[x][1].length;\n          break;\n      }\n    }\n    return text.join('\\t').replace(/%20/g, ' ');\n  };\n  \n  \n  /**\n   * Given the original text1, and an encoded string which describes the\n   * operations required to transform text1 into text2, compute the full diff.\n   * @param {string} text1 Source string for the diff.\n   * @param {string} delta Delta text.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @throws {!Error} If invalid input.\n   */\n  diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n    var diffs = [];\n    var diffsLength = 0;  // Keeping our own length var is faster in JS.\n    var pointer = 0;  // Cursor in text1\n    var tokens = delta.split(/\\t/g);\n    for (var x = 0; x < tokens.length; x++) {\n      // Each token begins with a one character parameter which specifies the\n      // operation of this token (delete, insert, equality).\n      var param = tokens[x].substring(1);\n      switch (tokens[x].charAt(0)) {\n        case '+':\n          try {\n            diffs[diffsLength++] =\n                new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n          } catch (ex) {\n            // Malformed URI sequence.\n            throw new Error('Illegal escape in diff_fromDelta: ' + param);\n          }\n          break;\n        case '-':\n          // Fall through.\n        case '=':\n          var n = parseInt(param, 10);\n          if (isNaN(n) || n < 0) {\n            throw new Error('Invalid number in diff_fromDelta: ' + param);\n          }\n          var text = text1.substring(pointer, pointer += n);\n          if (tokens[x].charAt(0) == '=') {\n            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n          } else {\n            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n          }\n          break;\n        default:\n          // Blank tokens are ok (from a trailing \\t).\n          // Anything else is an error.\n          if (tokens[x]) {\n            throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                            tokens[x]);\n          }\n      }\n    }\n    if (pointer != text1.length) {\n      throw new Error('Delta length (' + pointer +\n          ') does not equal source text length (' + text1.length + ').');\n    }\n    return diffs;\n  };\n  \n  \n  //  MATCH FUNCTIONS\n  \n  \n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc'.\n   * @param {string} text The text to search.\n   * @param {string} pattern The pattern to search for.\n   * @param {number} loc The location to search around.\n   * @return {number} Best match index or -1.\n   */\n  diff_match_patch.prototype.match_main = function(text, pattern, loc) {\n    // Check for null inputs.\n    if (text == null || pattern == null || loc == null) {\n      throw new Error('Null input. (match_main)');\n    }\n  \n    loc = Math.max(0, Math.min(loc, text.length));\n    if (text == pattern) {\n      // Shortcut (potentially not guaranteed by the algorithm)\n      return 0;\n    } else if (!text.length) {\n      // Nothing to match.\n      return -1;\n    } else if (text.substring(loc, loc + pattern.length) == pattern) {\n      // Perfect match at the perfect spot!  (Includes case of null pattern)\n      return loc;\n    } else {\n      // Do a fuzzy compare.\n      return this.match_bitap_(text, pattern, loc);\n    }\n  };\n  \n  \n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n   * Bitap algorithm.\n   * @param {string} text The text to search.\n   * @param {string} pattern The pattern to search for.\n   * @param {number} loc The location to search around.\n   * @return {number} Best match index or -1.\n   * @private\n   */\n  diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n    if (pattern.length > this.Match_MaxBits) {\n      throw new Error('Pattern too long for this browser.');\n    }\n  \n    // Initialise the alphabet.\n    var s = this.match_alphabet_(pattern);\n  \n    var dmp = this;  // 'this' becomes 'window' in a closure.\n  \n    /**\n     * Compute and return the score for a match with e errors and x location.\n     * Accesses loc and pattern through being a closure.\n     * @param {number} e Number of errors in match.\n     * @param {number} x Location of match.\n     * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n     * @private\n     */\n    function match_bitapScore_(e, x) {\n      var accuracy = e / pattern.length;\n      var proximity = Math.abs(loc - x);\n      if (!dmp.Match_Distance) {\n        // Dodge divide by zero error.\n        return proximity ? 1.0 : accuracy;\n      }\n      return accuracy + (proximity / dmp.Match_Distance);\n    }\n  \n    // Highest score beyond which we give up.\n    var score_threshold = this.Match_Threshold;\n    // Is there a nearby exact match? (speedup)\n    var best_loc = text.indexOf(pattern, loc);\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      // What about in the other direction? (speedup)\n      best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n      if (best_loc != -1) {\n        score_threshold =\n            Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      }\n    }\n  \n    // Initialise the bit arrays.\n    var matchmask = 1 << (pattern.length - 1);\n    best_loc = -1;\n  \n    var bin_min, bin_mid;\n    var bin_max = pattern.length + text.length;\n    var last_rd;\n    for (var d = 0; d < pattern.length; d++) {\n      // Scan for the best match; each iteration allows for one more error.\n      // Run a binary search to determine how far from 'loc' we can stray at this\n      // error level.\n      bin_min = 0;\n      bin_mid = bin_max;\n      while (bin_min < bin_mid) {\n        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n          bin_min = bin_mid;\n        } else {\n          bin_max = bin_mid;\n        }\n        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n      }\n      // Use the result from this iteration as the maximum for the next.\n      bin_max = bin_mid;\n      var start = Math.max(1, loc - bin_mid + 1);\n      var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n  \n      var rd = Array(finish + 2);\n      rd[finish + 1] = (1 << d) - 1;\n      for (var j = finish; j >= start; j--) {\n        // The alphabet (s) is a sparse hash, so the following line generates\n        // warnings.\n        var charMatch = s[text.charAt(j - 1)];\n        if (d === 0) {  // First pass: exact match.\n          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n        } else {  // Subsequent passes: fuzzy match.\n          rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                  (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                  last_rd[j + 1];\n        }\n        if (rd[j] & matchmask) {\n          var score = match_bitapScore_(d, j - 1);\n          // This match will almost certainly be better than any existing match.\n          // But check anyway.\n          if (score <= score_threshold) {\n            // Told you so.\n            score_threshold = score;\n            best_loc = j - 1;\n            if (best_loc > loc) {\n              // When passing loc, don't exceed our current distance from loc.\n              start = Math.max(1, 2 * loc - best_loc);\n            } else {\n              // Already passed loc, downhill from here on in.\n              break;\n            }\n          }\n        }\n      }\n      // No hope for a (better) match at greater error levels.\n      if (match_bitapScore_(d + 1, loc) > score_threshold) {\n        break;\n      }\n      last_rd = rd;\n    }\n    return best_loc;\n  };\n  \n  \n  /**\n   * Initialise the alphabet for the Bitap algorithm.\n   * @param {string} pattern The text to encode.\n   * @return {!Object} Hash of character locations.\n   * @private\n   */\n  diff_match_patch.prototype.match_alphabet_ = function(pattern) {\n    var s = {};\n    for (var i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] = 0;\n    }\n    for (var i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n    }\n    return s;\n  };\n  \n  \n  //  PATCH FUNCTIONS\n  \n  \n  /**\n   * Increase the context until it is unique,\n   * but don't let the pattern expand beyond Match_MaxBits.\n   * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n   * @param {string} text Source text.\n   * @private\n   */\n  diff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n    if (text.length == 0) {\n      return;\n    }\n    if (patch.start2 === null) {\n      throw Error('patch not initialized');\n    }\n    var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n    var padding = 0;\n  \n    // Look for the first and last matches of pattern in text.  If two different\n    // matches are found, increase the pattern length.\n    while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n           pattern.length < this.Match_MaxBits - this.Patch_Margin -\n           this.Patch_Margin) {\n      padding += this.Patch_Margin;\n      pattern = text.substring(patch.start2 - padding,\n                               patch.start2 + patch.length1 + padding);\n    }\n    // Add one chunk for good luck.\n    padding += this.Patch_Margin;\n  \n    // Add the prefix.\n    var prefix = text.substring(patch.start2 - padding, patch.start2);\n    if (prefix) {\n      patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n    }\n    // Add the suffix.\n    var suffix = text.substring(patch.start2 + patch.length1,\n                                patch.start2 + patch.length1 + padding);\n    if (suffix) {\n      patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n    }\n  \n    // Roll back the start points.\n    patch.start1 -= prefix.length;\n    patch.start2 -= prefix.length;\n    // Extend the lengths.\n    patch.length1 += prefix.length + suffix.length;\n    patch.length2 += prefix.length + suffix.length;\n  };\n  \n  \n  /**\n   * Compute a list of patches to turn text1 into text2.\n   * Use diffs if provided, otherwise compute it ourselves.\n   * There are four ways to call this function, depending on what data is\n   * available to the caller:\n   * Method 1:\n   * a = text1, b = text2\n   * Method 2:\n   * a = diffs\n   * Method 3 (optimal):\n   * a = text1, b = diffs\n   * Method 4 (deprecated, use method 3):\n   * a = text1, b = text2, c = diffs\n   *\n   * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n   * Array of diff tuples for text1 to text2 (method 2).\n   * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n   * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n   * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n   * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n    var text1, diffs;\n    if (typeof a == 'string' && typeof opt_b == 'string' &&\n        typeof opt_c == 'undefined') {\n      // Method 1: text1, text2\n      // Compute diffs from text1 and text2.\n      text1 = /** @type {string} */(a);\n      diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n      if (diffs.length > 2) {\n        this.diff_cleanupSemantic(diffs);\n        this.diff_cleanupEfficiency(diffs);\n      }\n    } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n        typeof opt_c == 'undefined') {\n      // Method 2: diffs\n      // Compute text1 from diffs.\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n      text1 = this.diff_text1(diffs);\n    } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n        typeof opt_c == 'undefined') {\n      // Method 3: text1, diffs\n      text1 = /** @type {string} */(a);\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n    } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n        opt_c && typeof opt_c == 'object') {\n      // Method 4: text1, text2, diffs\n      // text2 is not used.\n      text1 = /** @type {string} */(a);\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n    } else {\n      throw new Error('Unknown call format to patch_make.');\n    }\n  \n    if (diffs.length === 0) {\n      return [];  // Get rid of the null case.\n    }\n    var patches = [];\n    var patch = new diff_match_patch.patch_obj();\n    var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n    var char_count1 = 0;  // Number of characters into the text1 string.\n    var char_count2 = 0;  // Number of characters into the text2 string.\n    // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n    // text2 (postpatch_text).  We recreate the patches one by one to determine\n    // context info.\n    var prepatch_text = text1;\n    var postpatch_text = text1;\n    for (var x = 0; x < diffs.length; x++) {\n      var diff_type = diffs[x][0];\n      var diff_text = diffs[x][1];\n  \n      if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n        // A new patch starts here.\n        patch.start1 = char_count1;\n        patch.start2 = char_count2;\n      }\n  \n      switch (diff_type) {\n        case DIFF_INSERT:\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length2 += diff_text.length;\n          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                           postpatch_text.substring(char_count2);\n          break;\n        case DIFF_DELETE:\n          patch.length1 += diff_text.length;\n          patch.diffs[patchDiffLength++] = diffs[x];\n          postpatch_text = postpatch_text.substring(0, char_count2) +\n                           postpatch_text.substring(char_count2 +\n                               diff_text.length);\n          break;\n        case DIFF_EQUAL:\n          if (diff_text.length <= 2 * this.Patch_Margin &&\n              patchDiffLength && diffs.length != x + 1) {\n            // Small equality inside a patch.\n            patch.diffs[patchDiffLength++] = diffs[x];\n            patch.length1 += diff_text.length;\n            patch.length2 += diff_text.length;\n          } else if (diff_text.length >= 2 * this.Patch_Margin) {\n            // Time for a new patch.\n            if (patchDiffLength) {\n              this.patch_addContext_(patch, prepatch_text);\n              patches.push(patch);\n              patch = new diff_match_patch.patch_obj();\n              patchDiffLength = 0;\n              // Unlike Unidiff, our patch lists have a rolling context.\n              // https://github.com/google/diff-match-patch/wiki/Unidiff\n              // Update prepatch text & pos to reflect the application of the\n              // just completed patch.\n              prepatch_text = postpatch_text;\n              char_count1 = char_count2;\n            }\n          }\n          break;\n      }\n  \n      // Update the current character count.\n      if (diff_type !== DIFF_INSERT) {\n        char_count1 += diff_text.length;\n      }\n      if (diff_type !== DIFF_DELETE) {\n        char_count2 += diff_text.length;\n      }\n    }\n    // Pick up the leftover patch if not empty.\n    if (patchDiffLength) {\n      this.patch_addContext_(patch, prepatch_text);\n      patches.push(patch);\n    }\n  \n    return patches;\n  };\n  \n  \n  /**\n   * Given an array of patches, return another array that is identical.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_deepCopy = function(patches) {\n    // Making deep copies is hard in JavaScript.\n    var patchesCopy = [];\n    for (var x = 0; x < patches.length; x++) {\n      var patch = patches[x];\n      var patchCopy = new diff_match_patch.patch_obj();\n      patchCopy.diffs = [];\n      for (var y = 0; y < patch.diffs.length; y++) {\n        patchCopy.diffs[y] =\n            new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n      }\n      patchCopy.start1 = patch.start1;\n      patchCopy.start2 = patch.start2;\n      patchCopy.length1 = patch.length1;\n      patchCopy.length2 = patch.length2;\n      patchesCopy[x] = patchCopy;\n    }\n    return patchesCopy;\n  };\n  \n  \n  /**\n   * Merge a set of patches onto the text.  Return a patched text, as well\n   * as a list of true/false values indicating which patches were applied.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @param {string} text Old text.\n   * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n   *      new text and an array of boolean values.\n   */\n  diff_match_patch.prototype.patch_apply = function(patches, text) {\n    if (patches.length == 0) {\n      return [text, []];\n    }\n  \n    // Deep copy the patches so that no changes are made to originals.\n    patches = this.patch_deepCopy(patches);\n  \n    var nullPadding = this.patch_addPadding(patches);\n    text = nullPadding + text + nullPadding;\n  \n    this.patch_splitMax(patches);\n    // delta keeps track of the offset between the expected and actual location\n    // of the previous patch.  If there are patches expected at positions 10 and\n    // 20, but the first patch was found at 12, delta is 2 and the second patch\n    // has an effective expected position of 22.\n    var delta = 0;\n    var results = [];\n    for (var x = 0; x < patches.length; x++) {\n      var expected_loc = patches[x].start2 + delta;\n      var text1 = this.diff_text1(patches[x].diffs);\n      var start_loc;\n      var end_loc = -1;\n      if (text1.length > this.Match_MaxBits) {\n        // patch_splitMax will only provide an oversized pattern in the case of\n        // a monster delete.\n        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                    expected_loc);\n        if (start_loc != -1) {\n          end_loc = this.match_main(text,\n              text1.substring(text1.length - this.Match_MaxBits),\n              expected_loc + text1.length - this.Match_MaxBits);\n          if (end_loc == -1 || start_loc >= end_loc) {\n            // Can't find valid trailing context.  Drop this patch.\n            start_loc = -1;\n          }\n        }\n      } else {\n        start_loc = this.match_main(text, text1, expected_loc);\n      }\n      if (start_loc == -1) {\n        // No match found.  :(\n        results[x] = false;\n        // Subtract the delta for this failed patch from subsequent patches.\n        delta -= patches[x].length2 - patches[x].length1;\n      } else {\n        // Found a match.  :)\n        results[x] = true;\n        delta = start_loc - expected_loc;\n        var text2;\n        if (end_loc == -1) {\n          text2 = text.substring(start_loc, start_loc + text1.length);\n        } else {\n          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n        }\n        if (text1 == text2) {\n          // Perfect match, just shove the replacement text in.\n          text = text.substring(0, start_loc) +\n                 this.diff_text2(patches[x].diffs) +\n                 text.substring(start_loc + text1.length);\n        } else {\n          // Imperfect match.  Run a diff to get a framework of equivalent\n          // indices.\n          var diffs = this.diff_main(text1, text2, false);\n          if (text1.length > this.Match_MaxBits &&\n              this.diff_levenshtein(diffs) / text1.length >\n              this.Patch_DeleteThreshold) {\n            // The end points match, but the content is unacceptably bad.\n            results[x] = false;\n          } else {\n            this.diff_cleanupSemanticLossless(diffs);\n            var index1 = 0;\n            var index2;\n            for (var y = 0; y < patches[x].diffs.length; y++) {\n              var mod = patches[x].diffs[y];\n              if (mod[0] !== DIFF_EQUAL) {\n                index2 = this.diff_xIndex(diffs, index1);\n              }\n              if (mod[0] === DIFF_INSERT) {  // Insertion\n                text = text.substring(0, start_loc + index2) + mod[1] +\n                       text.substring(start_loc + index2);\n              } else if (mod[0] === DIFF_DELETE) {  // Deletion\n                text = text.substring(0, start_loc + index2) +\n                       text.substring(start_loc + this.diff_xIndex(diffs,\n                           index1 + mod[1].length));\n              }\n              if (mod[0] !== DIFF_DELETE) {\n                index1 += mod[1].length;\n              }\n            }\n          }\n        }\n      }\n    }\n    // Strip the padding off.\n    text = text.substring(nullPadding.length, text.length - nullPadding.length);\n    return [text, results];\n  };\n  \n  \n  /**\n   * Add some padding on text start and end so that edges can match something.\n   * Intended to be called only from within patch_apply.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {string} The padding string added to each side.\n   */\n  diff_match_patch.prototype.patch_addPadding = function(patches) {\n    var paddingLength = this.Patch_Margin;\n    var nullPadding = '';\n    for (var x = 1; x <= paddingLength; x++) {\n      nullPadding += String.fromCharCode(x);\n    }\n  \n    // Bump all the patches forward.\n    for (var x = 0; x < patches.length; x++) {\n      patches[x].start1 += paddingLength;\n      patches[x].start2 += paddingLength;\n    }\n  \n    // Add some padding on start of first diff.\n    var patch = patches[0];\n    var diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n      // Add nullPadding equality.\n      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n      patch.start1 -= paddingLength;  // Should be 0.\n      patch.start2 -= paddingLength;  // Should be 0.\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[0][1].length) {\n      // Grow first equality.\n      var extraLength = paddingLength - diffs[0][1].length;\n      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n      patch.start1 -= extraLength;\n      patch.start2 -= extraLength;\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n  \n    // Add some padding on end of last diff.\n    patch = patches[patches.length - 1];\n    diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n      // Add nullPadding equality.\n      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n      // Grow last equality.\n      var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n  \n    return nullPadding;\n  };\n  \n  \n  /**\n   * Look through the patches and break up any which are longer than the maximum\n   * limit of the match algorithm.\n   * Intended to be called only from within patch_apply.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_splitMax = function(patches) {\n    var patch_size = this.Match_MaxBits;\n    for (var x = 0; x < patches.length; x++) {\n      if (patches[x].length1 <= patch_size) {\n        continue;\n      }\n      var bigpatch = patches[x];\n      // Remove the big old patch.\n      patches.splice(x--, 1);\n      var start1 = bigpatch.start1;\n      var start2 = bigpatch.start2;\n      var precontext = '';\n      while (bigpatch.diffs.length !== 0) {\n        // Create one of several smaller patches.\n        var patch = new diff_match_patch.patch_obj();\n        var empty = true;\n        patch.start1 = start1 - precontext.length;\n        patch.start2 = start2 - precontext.length;\n        if (precontext !== '') {\n          patch.length1 = patch.length2 = precontext.length;\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n        }\n        while (bigpatch.diffs.length !== 0 &&\n               patch.length1 < patch_size - this.Patch_Margin) {\n          var diff_type = bigpatch.diffs[0][0];\n          var diff_text = bigpatch.diffs[0][1];\n          if (diff_type === DIFF_INSERT) {\n            // Insertions are harmless.\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n            patch.diffs.push(bigpatch.diffs.shift());\n            empty = false;\n          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                     patch.diffs[0][0] == DIFF_EQUAL &&\n                     diff_text.length > 2 * patch_size) {\n            // This is a large deletion.  Let it pass in one chunk.\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            empty = false;\n            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n            bigpatch.diffs.shift();\n          } else {\n            // Deletion or equality.  Only take as much as we can stomach.\n            diff_text = diff_text.substring(0,\n                patch_size - patch.length1 - this.Patch_Margin);\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            if (diff_type === DIFF_EQUAL) {\n              patch.length2 += diff_text.length;\n              start2 += diff_text.length;\n            } else {\n              empty = false;\n            }\n            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n            if (diff_text == bigpatch.diffs[0][1]) {\n              bigpatch.diffs.shift();\n            } else {\n              bigpatch.diffs[0][1] =\n                  bigpatch.diffs[0][1].substring(diff_text.length);\n            }\n          }\n        }\n        // Compute the head context for the next patch.\n        precontext = this.diff_text2(patch.diffs);\n        precontext =\n            precontext.substring(precontext.length - this.Patch_Margin);\n        // Append the end context for this patch.\n        var postcontext = this.diff_text1(bigpatch.diffs)\n                              .substring(0, this.Patch_Margin);\n        if (postcontext !== '') {\n          patch.length1 += postcontext.length;\n          patch.length2 += postcontext.length;\n          if (patch.diffs.length !== 0 &&\n              patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n            patch.diffs[patch.diffs.length - 1][1] += postcontext;\n          } else {\n            patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n          }\n        }\n        if (!empty) {\n          patches.splice(++x, 0, patch);\n        }\n      }\n    }\n  };\n  \n  \n  /**\n   * Take a list of patches and return a textual representation.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {string} Text representation of patches.\n   */\n  diff_match_patch.prototype.patch_toText = function(patches) {\n    var text = [];\n    for (var x = 0; x < patches.length; x++) {\n      text[x] = patches[x];\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Parse a textual representation of patches and return a list of Patch objects.\n   * @param {string} textline Text representation of patches.\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   * @throws {!Error} If invalid input.\n   */\n  diff_match_patch.prototype.patch_fromText = function(textline) {\n    var patches = [];\n    if (!textline) {\n      return patches;\n    }\n    var text = textline.split('\\n');\n    var textPointer = 0;\n    var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n    while (textPointer < text.length) {\n      var m = text[textPointer].match(patchHeader);\n      if (!m) {\n        throw new Error('Invalid patch string: ' + text[textPointer]);\n      }\n      var patch = new diff_match_patch.patch_obj();\n      patches.push(patch);\n      patch.start1 = parseInt(m[1], 10);\n      if (m[2] === '') {\n        patch.start1--;\n        patch.length1 = 1;\n      } else if (m[2] == '0') {\n        patch.length1 = 0;\n      } else {\n        patch.start1--;\n        patch.length1 = parseInt(m[2], 10);\n      }\n  \n      patch.start2 = parseInt(m[3], 10);\n      if (m[4] === '') {\n        patch.start2--;\n        patch.length2 = 1;\n      } else if (m[4] == '0') {\n        patch.length2 = 0;\n      } else {\n        patch.start2--;\n        patch.length2 = parseInt(m[4], 10);\n      }\n      textPointer++;\n  \n      while (textPointer < text.length) {\n        var sign = text[textPointer].charAt(0);\n        try {\n          var line = decodeURI(text[textPointer].substring(1));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in patch_fromText: ' + line);\n        }\n        if (sign == '-') {\n          // Deletion.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n        } else if (sign == '+') {\n          // Insertion.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n        } else if (sign == ' ') {\n          // Minor equality.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n        } else if (sign == '@') {\n          // Start of next patch.\n          break;\n        } else if (sign === '') {\n          // Blank line?  Whatever.\n        } else {\n          // WTF?\n          throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n        }\n        textPointer++;\n      }\n    }\n    return patches;\n  };\n  \n  \n  /**\n   * Class representing one patch operation.\n   * @constructor\n   */\n  diff_match_patch.patch_obj = function() {\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    this.diffs = [];\n    /** @type {?number} */\n    this.start1 = null;\n    /** @type {?number} */\n    this.start2 = null;\n    /** @type {number} */\n    this.length1 = 0;\n    /** @type {number} */\n    this.length2 = 0;\n  };\n  \n  \n  /**\n   * Emulate GNU diff's format.\n   * Header: @@ -382,8 +481,9 @@\n   * Indices are printed as 1-based, not 0-based.\n   * @return {string} The GNU diff string.\n   */\n  diff_match_patch.patch_obj.prototype.toString = function() {\n    var coords1, coords2;\n    if (this.length1 === 0) {\n      coords1 = this.start1 + ',0';\n    } else if (this.length1 == 1) {\n      coords1 = this.start1 + 1;\n    } else {\n      coords1 = (this.start1 + 1) + ',' + this.length1;\n    }\n    if (this.length2 === 0) {\n      coords2 = this.start2 + ',0';\n    } else if (this.length2 == 1) {\n      coords2 = this.start2 + 1;\n    } else {\n      coords2 = (this.start2 + 1) + ',' + this.length2;\n    }\n    var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n    var op;\n    // Escape the body of the patch with %xx notation.\n    for (var x = 0; x < this.diffs.length; x++) {\n      switch (this.diffs[x][0]) {\n        case DIFF_INSERT:\n          op = '+';\n          break;\n        case DIFF_DELETE:\n          op = '-';\n          break;\n        case DIFF_EQUAL:\n          op = ' ';\n          break;\n      }\n      text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n    }\n    return text.join('').replace(/%20/g, ' ');\n  };\n  \n  // CLOSURE:begin_strip\n  // Lines below here will not be included in the Closure-compatible library.\n  \n  // Export these global variables so that they survive Google's JS compiler.\n  // In a browser, 'this' will be 'window'.\n  // Users of node.js should 'require' the uncompressed version since Google's\n  // JS compiler may break the following exports for non-browser environments.\n  /** @suppress {globalThis} */\n  this['diff_match_patch'] = diff_match_patch;\n  /** @suppress {globalThis} */\n  this['DIFF_DELETE'] = DIFF_DELETE;\n  /** @suppress {globalThis} */\n  this['DIFF_INSERT'] = DIFF_INSERT;\n  /** @suppress {globalThis} */\n  this['DIFF_EQUAL'] = DIFF_EQUAL;",
            "created": "20180120063923147",
            "modified": "20190301000537293",
            "module-type": "library",
            "revision": "0",
            "tags": "",
            "type": "application/javascript"
        },
        "$:/plugins/ebalster/modloader/loader.js": {
            "title": "$:/plugins/ebalster/modloader/loader.js",
            "created": "20180120055013558",
            "modified": "20190301000537293",
            "module-type": "startup",
            "revision": "0",
            "tags": "",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/loader.js\ntype: application/javascript\nmodule-type: startup\n\nA TiddlyWiki modloader that makes last-minute adjustments to shadow tiddlers during the startup process.  Use this at risk of __INDESCRIBABLE PERIL__.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: true */\n\"use strict\";\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\n// Modloader log text.\nvar modLog = \"Mod loader has not run.\";\n\nvar modNotices = \"\";\n\n\n// Export name and synchronous status\nexports.name = \"eb-modloader\";\nexports.before = [\"load-modules\"];\nexports.after = [];\nexports.synchronous = true;\n\n/*\n\tCheck if a module has been loaded (that is, executed).\n\t\tIt's unsafe to patch modules whose code has already run.\n*/\nfunction isTiddlerLoadedModule(tiddler, title) {\n\n\tvar module = $tw.modules.titles[title];\n\n\t/*var moduleType = tiddler.fields[\"module-type\"];\n\tif (!moduleType) return false;\n\tvar typeGroup = $tw.modules.types[moduleType];\n\tif (!typeGroup) return false;\n\tvar module = typeGroup[title || tiddler.fields.title];*/\n\n\tif (!module) return false;\n\n\t// If there are exports, it has been loaded.\n\treturn Boolean(module.exports);\n}\n\nfunction generatePatchedFields(tiddler, title, patchList) {\n\t// Log\n\tmodLog += \"\\n* [[\" + tiddler.fields.title + \"]]\";\n\n\t// Check if the tiddler is a previously loaded module.\n\t//  Currently this is treated as a critical error.\n\tif (isTiddlerLoadedModule(tiddler, title)) {\n\t\tmodLog += \"\\n** ''ERROR, too late to patch.'' (see below)\";\n\t\treturn false;\n\t}\n\n\t// The text we'll be applying patches to.\n\tvar patchedText = tiddler.fields.text;\n\n\t// Find the actual source for the shadow.\n\tvar srcPlugin = $tw.wiki.getShadowSource(title);\n\t\n\t// Apply the patches one by one.\n\tfor (var i = 0; i < patchList.length; ++i) {\n\t\tvar patchTid = patchList[i];\n\t\tmodLog += \"\\n** Apply [[\" + patchTid.fields.title + \"]]\";\n\n\t\ttry {\n\t\t\t// Parse and appy the patch.\n\t\t\tvar patch = diff.patch_fromText(patchTid.fields.text || \"\");\n\t\t\tvar patchResult = diff.patch_apply(patch, patchedText);\n\n\t\t\t// Check for any patch conflicts\n\t\t\tfor (var j = 0; j < patchResult[1].length; ++j) {\n\t\t\t\tif (!patchResult[1])\n\t\t\t\t\tthrow \"Conflict in patch #\" + j + \"/\" + patchResult[1].length;\n\t\t\t}\n\n\t\t\t// Store\n\t\t\tpatchedText = patchResult[0];\n\t\t\tmodLog += \": \" + patchResult[1].length + \" changes\";\n\t\t}\n\t\tcatch (err) {\n\t\t\tmodNotices += \"* ''\" + String(err) +\n\t\t\t\t\"'' applying [[\" + patchTid.fields.title + \"]]\" +\n\t\t\t\t\" to [[\" + title + \"]]\\n\";\n\t\t\tmodLog += \"\\n*** ''\" + String(err) + \"''\";\n\t\t\treturn false;\n\t\t}\n\n\t\t// Display a warning if this patch expected a different source\n\t\tvar srcExpect = patchTid.fields['modloader-source'];\n\t\tif (srcExpect && srcPlugin != srcExpect) {\n\t\t\tmodNotices += \"* ''Warning:'' expected [[\" +\n\t\t\t\ttitle + \"]] to have source plugin [[\" +\n\t\t\t\tsrcExpect + \"]], instead is [[\" + srcPlugin + \"]].\\n\";\n\t\t\tmodLog += \"\\n*** ''WARNING: unexpected source'' [[\" + srcPlugin + \"]]\";\n\t\t}\n\t}\n\n\t// Possibly re-assign a module's definition\n\tvar module = $tw.modules.titles[title];\n\tif (module) module.definition = patchedText;\n\n\t// Return the patched fields.\n\treturn Object.assign({}, tiddler.fields, {text: patchedText});\n}\n\nexports.startup = function() {\n\t\n\tmodLog = \"Running Mod Loader...\\n\\n\";\n\n\t// Accumulate unpatchables\n\tvar unpatchables = [];\n\t$tw.utils.each($tw.modules.titles, function(module, title) {\n\t\tif (typeof module.definition === \"string\" && module.exports) unpatchables.push(title);\n\t});\n\t\n\tvar displayStatus = false;\n\n\tvar patchPlan = Object.create(null),\n\t\tpatchCount = 0, target, srcPlugin,\n\t\tabort = false;\n\n\t/*\n\t\tAccumulate patch tiddlers from the wiki.\n\t\t\tPatches are only applied if the \n\t*/\n\t$tw.wiki.eachTiddlerPlusShadows(function(patchTiddler,title) {\n\t\tif (patchTiddler.fields.type != 'text/x-patch') return;\n\t\ttarget = patchTiddler.fields['modloader-target'];\n\t\tif (target) {\n\t\t\tif (patchPlan[target]) patchPlan[target].push(tiddler);\n\t\t\telse patchPlan[target] = [patchTiddler];\n\t\t\t++patchCount;\n\t\t}\n\t});\n\n\t// Log\n\tif (patchCount) {\n\t\tmodLog += patchCount + \" patches found.  Applying:\\n\\n\";\n\t}\n\telse modLog += \"no patches found.\\n\\nPatches must define field modloader-target and set type to `text/x-patch`.\";\n\n\t// Compute a mod plugin that patches shadow tiddlers.\n\t//   Non-shadows are unaffected by the modloader.\n\tvar modTiddlers = {};\n\t$tw.wiki.eachShadow(function(tiddler,title) {\n\t\t// Any patches for this target?\n\t\tvar patches = patchPlan[title];\n\t\tif (abort || !patches) return;\n\n\t\t// Try to generate patched tiddler.\n\t\tvar patchedFields = generatePatchedFields(tiddler, title, patches);\n\n\t\tif (patchedFields) {\n\t\t\t// Store the unmodded tiddler as a backup.\n\t\t\tmodutil.modBackupTiddlers[title] = tiddler;\n\t\t\tpatchedFields[\"modloader-source\"] = tiddler.source;\n\t\t\tmodTiddlers[title] = patchedFields;\n\t\t}\n\t\telse {\n\t\t\tabort = true;\n\t\t}\n\t});\n\n\t// Generate warnings for non-existent targets.\n\tif (!abort) for (target in patchPlan) {\n\t\tif (modTiddlers[target] === undefined) {\n\t\t\tmodNotices += \"* ''Warning:'' can't apply [[\" +\n\t\t\t\tpatchPlan[target][0].fields.title + \"]] to non-existent target `\" +\n\t\t\t\ttarget + \"`, skipped\\n\";\n\t\t\tmodLog += \"\\n* `\" + target + \"`: ''WARNING: target not found!''\";\n\t\t\tdisplayStatus = true;\n\t\t}\n\t}\n\n\t// Possibly abort all mods.  We do this to avoid partial code changes.\n\tif (abort) {\n\t\tmodLog += \"\\n\\nPatch aborted completely due to errors.\";\n\t\tmodTiddlers = {};\n\t}\n\telse {\n\t\t// We could forcefully patch other startup modules, if support was needed.\n\t\t//   This would be done by discarding and re-executing the module.  A bit crass.\n\t\t//   $tw.modules.types[\"startup\"][modified-startup] = ...\n\t}\n\n\t// Display note about unpatchables\n\tif (unpatchables.length) {\n\t\tmodLog += \"\\n\\n''NOTE'': it's too late for the modloader to patch these modules:\\n\\n\";\n\t\t$tw.utils.each(unpatchables, function(title) {\n\t\t\tmodLog += \"* `\" + $tw.modules.titles[title].moduleType + \"` [[\" + title + \"]]\\n\";\n\t\t});\n\t\tmodLog += \"\\n\";\n\t}\n\n\t// Generate status report.\n\tmodTiddlers[modutil.PATH_MOD_STATUS] = {text: modLog};\n\n\t// Possibly generate an alert popup with the modloader log.\n\tif (abort || displayStatus)\n\t{\n\t\tmodutil.showModLoaderAlert({\n\t\t\theader: (abort ? \"Mod Loader Failed!\" : \"Mod Loader Warning!\"),\n\t\t\tnotices: modNotices,\n\t\t});\n\t}\n\n\t// Bake the info tiddlers into a plugin\n\tvar modloaderPlugin = {\n\t\ttitle: modutil.PATH_MOD_PLUGIN,\n\t\ttype: \"application/json\",\n\t\t\"plugin-type\": \"modloader\",\n\t\t\"plugin-priority\": 100,\n\t\ttext: JSON.stringify({tiddlers: modTiddlers},null,1)\n\t};\n\t$tw.wiki.addTiddler(new $tw.Tiddler(modloaderPlugin));\n\t$tw.wiki.readPluginInfo();\n\t$tw.wiki.registerPluginTiddlers(\"modloader\");\n\t$tw.wiki.unpackPluginTiddlers();\n};\n\n})();"
        },
        "$:/plugins/ebalster/modloader/parsers/patch.js": {
            "title": "$:/plugins/ebalster/modloader/parsers/patch.js",
            "created": "20180121184614270",
            "modified": "20190301000537294",
            "module-type": "parser",
            "revision": "0",
            "tags": "",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/parsers/patch.js\ntype: application/javascript\nmodule-type: parser\n\nRender tiddlers of type \"text/x-patch\" like other plaintext tiddlers.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\nvar TextParser = function(type,text,options) {\n\n\tvar patches = diff.patch_fromText(text || \"\");\n\n\t//var src = \n\n\t//var diff = diff.diff_main()\n\n\t// Render the patch's insertions, deletions and preservations...\n\tvar html = [];\n\tfor (var i = 0; i < patches.length; i++) {\n\n\t\t// Render patch location note\n\t\tvar patch = patches[i];\n\t\thtml.push({\n\t\t\ttype:\"element\",\n\t\t\ttag: \"h3\",\n\t\t\tchildren: [{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"@@ -\" + (patch.start1+1) + \",\" + patch.length1 +\n\t\t\t\t\t\" +\" + (patch.start2+1) + \",\" + patch.length2 + \" @@\"\n\t\t\t}]\n\t\t});\n\t\thtml.push({type:\"element\", tag: \"hr\"});\n\n\t\t// Render the diffs\n\t\tfor (var j = 0; j < patch.diffs.length; ++j) {\n\t\t\tvar curdiff = patch.diffs[j];\n\t\t\t\tvar tag = \"span\";\n\t\t\tswitch (curdiff[0]) {\n\t\t\t\tcase +1: tag = \"ins\";  break;\n\t\t\t\tcase -1: tag = \"del\";  break;\n\t\t\t\tcase  0: tag = \"span\"; break;\n\t\t\t}\n\t\t\thtml.push({\n\t\t\t\ttype:\"element\",\n\t\t\t\ttag: tag,\n\t\t\t\tchildren: [{type: \"text\", text: curdiff[1]}]\n\t\t\t});\n\t\t}\n\t\thtml.push({type:\"element\", tag: \"hr\"});\n\t}\n\n\t// DEBUG\n\t//var html = [{type:\"text\", text: text}]; //text: JSON.stringify(patch,null,' ')}];\n\n\tthis.tree = [{\n\t\ttype: \"element\", tag: \"pre\",\n\t\tattributes: {class: {type: \"string\", value: \"modloader-patch\"}},\n\t\tchildren: [{type: \"element\", tag: \"code\", children: html}]\n\t}];\n};\n\nexports[\"text/x-patch\"] = TextParser;\n\n})();\n\n"
        },
        "$:/plugins/ebalster/modloader/patches/core/modules/startup.js": {
            "title": "$:/plugins/ebalster/modloader/patches/core/modules/startup.js",
            "created": "20180123225257337",
            "modified": "20190301000537294",
            "modloader-source": "$:/core",
            "revision": "0",
            "tags": "",
            "type": "text/x-patch",
            "text": "@@ -500,32 +500,49 @@\n trumentation%22;%0A%0A\n+// MODLOADER FIX \n var widget = req\n@@ -608,32 +608,109 @@\n  = function() %7B%0A\n+%09var widget = require(%22$:/core/modules/widgets/widget.js%22); // MODLOADER FIX%0A\n %09var modules,n,m\n"
        },
        "$:/plugins/ebalster/modloader/patchmaker": {
            "title": "$:/plugins/ebalster/modloader/patchmaker",
            "created": "20180121081336699",
            "modified": "20190301000537294",
            "revision": "0",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "\\define test_hint(filter)\n<$list filter=\"$filter$\" emptyMessage=\"✘\">\n✔\n</$list>\n\\end\n\n\\define replace_hint(filter)\n<$list filter=\"$filter$\">\nWarning: This tiddler exists and will be replaced!\n</$list>\n\\end\n\nUse this utility to generate patches, or examine its source to learn about the `action-createpatch` widget.\n\nIf ''destination'' is not specified it will be set to ''source''.  The mod-maker always uses a shadow tiddler for ''source'' even if there is a real tiddler replacing it.  The ''destination'' will always be selected as a real tiddler.\n\n\n<$tiddler tiddler=\"$:/temp/modloader/modmaker\">\n\n<table>\n<tr>\n  <th>Source</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-source\"\n      placeholder=\"Title of shadow tiddler to be modded.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-source}is[shadow]]>>\n  </td>\n</tr>\n<tr>\n  <th>Source Plugin</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-source-plugin\"\n      placeholder=\"Title of plugin containing source. Defaults to auto.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-source-plugin}is[plugin]]>>\n  </td>\n</tr>\n<tr>\n  <th>Destination</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-destination\"\n      placeholder=\"Title of modified tiddler. Defaults to target.\"\n      size=45/>\n  <td>\n    <<test_hint [title{!!patch-destination}is[tiddler]]>>\n  </td>\n</tr>\n<tr>\n  <th>Output</th>\n  <td>\n  </td>\n    <$edit-text\n      field=\"patch-output\"\n      placeholder=\"Title of patch tiddler to create. (Replaces existing)\"\n      size=45/>\n      <br/>\n      <<replace_hint [title{!!patch-output}is[tiddler]]>>\n  <td>\n    <<test_hint [title{!!patch-output}minlength[1]]>>\n  </td>\n</tr>\n</table>\n\n<$button>Compute Patch\n<$action-createpatch\n   source={{!!patch-source}}\n   source-plugin={{!!patch-source-plugin}}\n   destination={{!!patch-destination}}\n   output={{!!patch-output}}\n   savetitle=\"!!patch-made\" />\n</$button>\n\n<$list filter=\"[{!!patch-made}is[tiddler]]\">\n<$link>Open your patch: {{!!title}}</$link>\n</$list>\n\n</$tiddler>"
        },
        "$:/plugins/ebalster/modloader/status": {
            "title": "$:/plugins/ebalster/modloader/status",
            "created": "20180121175357975",
            "modified": "20190301000537294",
            "revision": "0",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "!Modloader Status Report\n\n<$transclude tiddler=\"$:/temp/mod-plugin/status\">\n\nNot found.\n\nIt appears the modloader did not run at startup.\n\n</$transclude>"
        },
        "$:/plugins/ebalster/modloader/stylesheet.css": {
            "title": "$:/plugins/ebalster/modloader/stylesheet.css",
            "created": "20180123160859840",
            "modified": "20190301000537294",
            "revision": "0",
            "tags": "$:/tags/Stylesheet",
            "type": "text/css",
            "text": ".modloader-patch span {\n  font-weight: bold;\n  color: #555555;\n}\n\n.modloader-patch ins {\n  text-decoration: none;\n  font-weight: bold;\n  color: #009900;\n  background: #EEFFEE;\n}\n\n.modloader-patch del {\n  text-decoration: strikethrough;\n  color: #DD0000;\n  background: #FFBBBB;\n}"
        },
        "$:/plugins/ebalster/modloader/utils.js": {
            "title": "$:/plugins/ebalster/modloader/utils.js",
            "created": "20180121075602920",
            "modified": "20190301000537294",
            "module-type": "library",
            "revision": "0",
            "tags": "",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/plugins/ebalster/modloader/utils.js\ntype: application/javascript\nmodule-type: library\n\nUtility functions and data storage for the modloader.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: true */\n\"use strict\";\n\n\nvar DiffLib = require(\"$:/plugins/ebalster/modloader/diff_patch_match.js\");\nexports.diff = new DiffLib.diff_match_patch();\n\n// Pretty liberal timeout\nexports.diff.Diff_Timeout = 10.0;\n\n// Plenty of context on patches\nexports.diff.Patch_Margin = 8;\n\n/*\n\tFind the shadow tiddler in the given plugin and return it.\n\t\tIf no pluginTitle is provided, attempt to guess it.\n\t\tResult (if non-null) is a new object {source: <plugin title>, fields: {<original fields>}} \n*/\nexports.findOriginalShadow = function findOriginalShadow(title, pluginTitle) {\n\t// Direct search if pluginTitle is specified.\n\tif (pluginTitle) {\n\t\tvar plugInfo = $tw.wiki.getPluginInfo(pluginTitle);\n\t\tif (plugInfo && plugInfo.tiddlers && plugInfo.tiddlers[title]) return {\n\t\t\tfields: plugInfo.tiddlers[title],\n\t\t\tsource: pluginTitle,\n\t\t};\n\t\treturn null;\n\t}\n\n\t// No pluginTitle: first try core (most likely mod target)\n\tvar found = findOriginalShadow(title, \"$:/core\");\n\tif (found) return found;\n\n\t// Then try all other tiddlers in the wiki.\n\t//   TODO would be nice to do this in load order somehow\n\t$tw.wiki.each(function(searchTiddler, searchTitle) {\n\t\t// Do NOT consider temp tiddlers, which are usually generated.\n\t\tif (searchTitle.substr(0,7) == \"$:/temp\") return;\n\t\tif (!found) found = findOriginalShadow(title, searchTitle);\n\t});\n\treturn found;\n};\n\nexports.modBackupTiddlers = {};\n\n\n// Alert display path\nexports.PATH_ALERT_TEMPLATE = \"$:/plugins/ebalster/modloader/alert\";\n\nexports.PATH_MOD_PLUGIN = \"$:/temp/mod-plugin\";\nexports.PATH_MOD_STATUS = \"$:/temp/mod-plugin/status\";\nexports.PATH_ALERT_PREFIX = \"$:/temp/mod-plugin/alert\";\n\nvar ALERT_COUNTER = 1;\n\n//var ALERT_PREFIX = \"$:/temp/\"\n\n\nexports.showModAlertEx = function(template, fields) {\n\tvar tiddler;\n\tvar affix = {\n\t\ttitle: exports.PATH_ALERT_PREFIX + \"/\" + exports.ALERT_COUNTER++,\n\t\ttags: \"[[$:/tags/Alert]]\",\n\t\tcomponent: \"Modloader Plugin\"\n\t};\n\tif (template) {\n\t\ttiddler = new $tw.Tiddler($tw.wiki.getTiddler(template), fields, affix);\n\t}\n\telse {\n\t\ttiddler = new $tw.Tiddler(fields, affix);\n\t}\n\t$tw.wiki.addTiddler(tiddler);\n};\n\nexports.showModLoaderAlert = function(fields) {\n\texports.showModAlertEx(exports.PATH_ALERT_TEMPLATE, fields);\n};\n\nexports.showGenericAlert = function(text) {\n\texports.showModAlertEx(null, {text: text});\n};\n\n\n})();"
        },
        "$:/plugins/ebalster/modloader/widgets/action-createpatch.js": {
            "title": "$:/plugins/ebalster/modloader/widgets/action-createpatch.js",
            "text": "// created: 20180121073220273\n// modified: 20190301000537294\n// module-type: widget\n// revision: 0\n// tags: \n// title: $:/plugins/ebalster/modloader/widgets/action-createpatch.js\n// type: application/javascript\n\n/*\\\ntitle: $:/plugins/ebalster/modloader/widgets/action-createpatch.js\ntype: application/javascript\nmodule-type: widget\n\nAction widget to create a patch tiddler for use with the modloader.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar modutil = require(\"$:/plugins/ebalster/modloader/utils.js\");\nvar diff    = modutil.diff;\n\n\nvar CreatePatchWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nCreatePatchWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nCreatePatchWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nCreatePatchWidget.prototype.execute = function() {\n\tthis.patchSource = this.getAttribute(\"source\");\n\tthis.patchSourcePlugin = this.getAttribute(\"source-plugin\");\n\tthis.patchDestination = this.getAttribute(\"destination\") || this.patchSource;\n\tthis.patchOutput = this.getAttribute(\"output\");\n\tthis.actionSaveTitle = this.getAttribute(\"savetitle\");\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nCreatePatchWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif($tw.utils.count(changedAttributes) > 0) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nvar ALERT_PREFIX = \"!!Patch creation failed...\\n\\n\";\n\nCreatePatchWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tvar self=this;\n\tvar outTitle = this.patchOutput || this.wiki.generateNewTitle(\"ModloaderPatch\");\n\n\tif (!this.patchSource) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"action-createpatch requires a `source` to be set.\");\n\t\treturn true;\n\t}\n\n\t// Grab the source tiddler (which must exist as a shadow).\n\t//   Source plugin will be guessed if not provided.\n\tvar sourceTiddler = modutil.findOriginalShadow(\n\t\tthis.patchSource,\n\t\tthis.patchSourcePlugin);\n\tif (!sourceTiddler) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch source `\" + this.patchSource + \"` not found in \" +\n\t\t\t(this.patchSourcePlugin ? \"source-plugin `\" + this.patchSourcePlugin + \"`\" : \"any plugin.\"));\n\t\treturn true;\n\t}\n\n\t// Grab the destination tiddler (which must exist as a non-shadow or overriding shadow.)\n\tif (!$tw.wiki.tiddlerExists(this.patchDestination) &&\n\t\t$tw.wiki.getShadowSource(this.patchDestination) == sourceTiddler.source) {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch destination `\" + this.patchDestination + \"` refers to the target.\");\n\t\treturn true;\n\t}\n\tvar destTiddler = $tw.wiki.getTiddler(this.patchDestination);\n\tif (!destTiddler)  {\n\t\tmodutil.showGenericAlert(ALERT_PREFIX + \n\t\t\t\"Patch destination `\" + this.patchDestination + \"` doesn't exist.\");\n\t\treturn true;\n\t}\n\n\t//\n\tvar sourceData = sourceTiddler.fields.text || \"\";\n\tvar destData = destTiddler.fields.text.replace(/(\\n)(\\n)/g, \"\\r$1\\r$2\") || \"\";\n\t//var destData = destTiddler.fields.text || \"\";\n\n\t// Generate a diff and clean it up.\n\tvar delta = diff.diff_main(sourceData, destData, false);\n\tdiff.diff_cleanupSemantic(delta);\n\n\t// Generate the patch.\n\tvar patch = diff.patch_make(sourceData, delta);\n\tpatch = diff.patch_toText(patch);\n\n\t//var patch = diff.patch_make(sourceTiddler.fields.text, destTiddler.fields.text); // DBG\n\n\t// Generate fields for the patch tiddler.\n\tvar fields = {\n\t\ttext: patch,\n\t\ttype: \"text/x-patch\",\n\t\t\"modloader-target\": String(this.patchSource),\n\t\t\"modloader-source\": String(sourceTiddler.source),\n\t};\n\n\t// Add the generated patch tiddler to the wiki.\n\tvar tiddler = this.wiki.addTiddler(new $tw.Tiddler(\n\t\tthis.wiki.getCreationFields(),\n\t\tfields,\n\t\tthis.wiki.getModificationFields(),\n\t\t{title: outTitle}));\n\n\t// Set the title reference, possibly.\n\tif(this.actionSaveTitle) {\n\t\tthis.wiki.setTextReference(this.actionSaveTitle,outTitle,this.getVariable(\"currentTiddler\"));\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-createpatch\"] = CreatePatchWidget;\n\n})();\n",
            "type": "application/javascript",
            "module-type": "widget",
            "created": "20180121073220273",
            "modified": "20190301000537294",
            "revision": "0",
            "tags": ""
        }
    }
}